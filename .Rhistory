# Optional: Check again
summary(train_data_imputed)
# Filter out bad BMI values
df <- df %>%
filter(is.finite(BMI_COMP), HEIGHT > 0, WEIGHT > 0)
# Use BMI_COMP instead of BMI
predictors <- c("AGE80", "BMI_COMP", "SMOKER_COMP", "STATE", "ADDEPEV",
"CHCCOPD", "CHECKUP", "GENHLTH", "HLTHPLN",
"EDUCA_COMP", "INCOME_COMP", "SEX", "ALCDAY5")
# Convert factor predictors to numeric if needed
df[predictors] <- lapply(df[predictors], function(col) {
if (is.factor(col)) suppressWarnings(as.numeric(as.character(col))) else col
})
df <- df %>%
filter(if_any(all_of(predictors), ~ !is.na(.) & is.finite(.)))
# Create predictor matrix
x <- data.matrix(df[, predictors])
# Target
y <- df$ECIG_COMP
# Final modeling data frame
data <- data.frame(x, y)
model <- lm(y ~ ., data = data)
summary(model)
# Visualize residuals
plot(model)
# Check model parameters
model_parameters(model)
# VIF (multicollinearity)
vif(model)
set.seed(123)
cv_model <- train(
x = x,
y = y,
method = "glmnet",
trControl = trainControl(method = "cv", number = 5)
)
print(cv_model)
predictions <- predict(model, newdata = data.frame(x))
actual_values <- y
rmse <- sqrt(mean((actual_values - predictions)^2))
print(paste("Train RMSE:", round(rmse, 3)))
# Residual Plot
ggplot(data.frame(resid = residuals(model)), aes(x = resid)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
labs(title = "Residuals Distribution", x = "Residuals")
# Coefficient Importance Plot
coef_df <- data.frame(Variable = names(coef(model))[-1], Coefficient = coef(model)[-1])
ggplot(coef_df, aes(x = reorder(Variable, abs(Coefficient)), y = Coefficient)) +
geom_col(fill = "orange") +
coord_flip() +
labs(title = "Coefficient Estimates", x = "Variables", y = "Coefficient")
df$ECIG_BINARY <- ifelse(df$ECIG_COMP == 1 | df$ECIG_COMP == 2, 1, 0)
log_model <- glm(ECIG_BINARY ~ ., data = data.frame(df[, predictors], ECIG_BINARY = df$ECIG_BINARY), family = "binomial")
summary(log_model)
probs <- predict(log_model, type = "response")
roc_obj <- roc(df$ECIG_BINARY, probs)
auc(roc_obj)
plot(roc_obj, col = "blue", lwd = 2, main = "ROC Curve")
abline(a = 0, b = 1, lty = 2, col = "red")
# Recalculate probabilities (if needed)
probs <- predict(log_model, type = "response")
# Create a dataframe for plotting
calib_data <- data.frame(
predicted = probs,
actual = factor(df$ECIG_BINARY)
)
# Use caret to create calibration data
calib <- calibration(actual ~ predicted, data = calib_data, class = "1", cuts = 10)
# Plot the calibration curve
ggplot(calib) +
geom_line(aes(x = midpoint, y = Percent), color = "blue", linewidth = 1.2) +
geom_point(aes(x = midpoint, y = Percent), color = "blue", size = 2) +
geom_abline(slope = 1, intercept = 0, linetype = "dotted", color = "gray40") +
labs(title = "Calibration Plot",
x = "Predicted Probability",
y = "Observed Proportion (Current User)") +
theme_minimal(base_size = 14)
# Convert outcome to factor for classification
df$ECIG_BINARY <- factor(ifelse(df$ECIG_COMP == 1 | df$ECIG_COMP == 2, 1, 0))
# Train Random Forest model
set.seed(123)
rf_model <- randomForest(
x = df[, predictors],
y = df$ECIG_BINARY,
ntree = 100,           # number of trees
mtry = 3,              # number of variables per split (can tune)
importance = TRUE
)
# Check model summary
print(rf_model)
# Predicted probabilities
rf_probs <- predict(rf_model, type = "prob")[, 2]  # probability of class "1"
# ROC curve
rf_roc <- roc(df$ECIG_BINARY, rf_probs)
# AUC
auc(rf_roc)
# Plot ROC
plot(rf_roc, col = "forestgreen", lwd = 2, main = "Random Forest ROC Curve")
abline(a = 0, b = 1, lty = 2, col = "gray")
# Visualize feature importance
varImpPlot(rf_model, main = "Variable Importance (Random Forest)", pch = 19, col = "darkgreen")
# Predicted probabilities
rf_probs <- predict(rf_model, type = "prob")[, 2]  # probability of class "1"
# ROC curve
rf_roc <- roc(df$ECIG_BINARY, rf_probs)
# AUC
auc(rf_roc)
# Plot ROC
plot(rf_roc, col = "forestgreen", lwd = 2, main = "Random Forest ROC Curve")
abline(a = 0, b = 1, lty = 2, col = "red")
library(haven)
library(mice) # For imputation
library(tidyverse)
library(caret)
library(glmnet)
library(parameters)
library(see)
library(lmtest)  # For assumption testing
library(ggplot2)
library(car)  # For Variance Inflation Factor (VIF)
brfss_2017 <- read_xpt("LLCP2017.XPT")
head(brfss_2017)
colnames(brfss_2017)
brfss_2017_cleaned <- brfss_2017 %>%
select(-c(2:6), -c(10:27), -31, -37, -40, -45, -c(53:57), -c(62:64), -72, -c(80:82), -85, -c(87:89), -c(97:102), -106, -108, -110, -c(112:246), ... = -c(255:258), -c(326:327), -c(330:337), -c(340:345), -c(356:357))
head(brfss_2017_cleaned)
names(brfss_2017_cleaned)[1] <- "STATE"
names(brfss_2017_cleaned)[4] <- "PSU"
names(brfss_2017_cleaned)[8] <- "HLTHPLN"
names(brfss_2017_cleaned)[9] <- "PERSDOC"
names(brfss_2017_cleaned)[11] <- "CHECKUP"
names(brfss_2017_cleaned)[12] <- "BPHIGH"
names(brfss_2017_cleaned)[13] <- "CHOLCHK"
names(brfss_2017_cleaned)[14] <- "TOLDHI"
names(brfss_2017_cleaned)[15] <- "CVDINFR"
names(brfss_2017_cleaned)[16] <- "CVDCRHD"
names(brfss_2017_cleaned)[17] <- "CVDSTRK"
names(brfss_2017_cleaned)[18] <- "ASTHMA"
names(brfss_2017_cleaned)[21] <- "CHCCOPD"
names(brfss_2017_cleaned)[22] <- "HAVARTH"
names(brfss_2017_cleaned)[23] <- "ADDEPEV"
names(brfss_2017_cleaned)[25] <- "DIABETES"
names(brfss_2017_cleaned)[29] <- "RENTHOME"
names(brfss_2017_cleaned)[30] <- "VETERAN"
names(brfss_2017_cleaned)[31] <- "EMPLOYED"
names(brfss_2017_cleaned)[33] <- "INCOME"
names(brfss_2017_cleaned)[35] <- "WEIGHT"
names(brfss_2017_cleaned)[36] <- "HEIGHT"
names(brfss_2017_cleaned)[44] <- "USENOW"
names(brfss_2017_cleaned)[47] <- "FRUIT"
names(brfss_2017_cleaned)[48] <- "FRUIT_JUICE"
names(brfss_2017_cleaned)[49] <- "GREEN_VEG"
names(brfss_2017_cleaned)[50] <- "FRENCHF"
names(brfss_2017_cleaned)[51] <- "POTATO"
names(brfss_2017_cleaned)[52] <- "OTHER_VEG"
names(brfss_2017_cleaned)[53] <- "EXERCISE_ANY"
names(brfss_2017_cleaned)[56] <- "FLUSHOT"
names(brfss_2017_cleaned)[57] <- "PNEUMONIA_VAC"
names(brfss_2017_cleaned)[58] <- "HIVTEST"
names(brfss_2017_cleaned)[59] <- "HIVRISK"
names(brfss_2017_cleaned)[63] <- "STSTR"
names(brfss_2017_cleaned)[64] <- "STRATUM_WGHT"
names(brfss_2017_cleaned)[65] <- "RAWRAKE"
names(brfss_2017_cleaned)[66] <- "WT2RAKE"
names(brfss_2017_cleaned)[67] <- "IMPRACE"
names(brfss_2017_cleaned)[68] <- "DUALUSE"
names(brfss_2017_cleaned)[69] <- "DUALCOR"
names(brfss_2017_cleaned)[70] <- "LLCPWT2"
names(brfss_2017_cleaned)[71] <- "LLCPWT"
names(brfss_2017_cleaned)[72] <- "RFHLTH"
names(brfss_2017_cleaned)[73] <- "PHYS_COMP"
names(brfss_2017_cleaned)[74] <- "MENT_COMP"
names(brfss_2017_cleaned)[75] <- "HCVU651"
names(brfss_2017_cleaned)[76] <- "RFHYPES"
names(brfss_2017_cleaned)[77] <- "CHOLCH1"
names(brfss_2017_cleaned)[78] <- "HICHOL_COMP"
names(brfss_2017_cleaned)[79] <- "MI_CHD"
names(brfss_2017_cleaned)[80] <- "ASTHMA_LIFE"
names(brfss_2017_cleaned)[81] <- "ASTHMA_NOW_COMP"
names(brfss_2017_cleaned)[82] <- "ASTHMA_COMP"
names(brfss_2017_cleaned)[83] <- "ARTHRITIS_DIAGNOS"
names(brfss_2017_cleaned)[84] <- "LIMIT_ACTIVITY"
names(brfss_2017_cleaned)[85] <- "LIMIT_WORK"
names(brfss_2017_cleaned)[86] <- "LIMIT_SOCIAL"
names(brfss_2017_cleaned)[87] <- "PRACE_COMP"
names(brfss_2017_cleaned)[88] <- "MULTI_RACE"
names(brfss_2017_cleaned)[89] <- "HISPANIC_COMP"
names(brfss_2017_cleaned)[90] <- "RACE_COMP"
names(brfss_2017_cleaned)[91] <- "RACEG21"
names(brfss_2017_cleaned)[92] <- "RACEGR3"
names(brfss_2017_cleaned)[93] <- "RACE_G1"
names(brfss_2017_cleaned)[94] <- "AGEG5YR"
names(brfss_2017_cleaned)[95] <- "AGE65YR"
names(brfss_2017_cleaned)[96] <- "AGE80"
names(brfss_2017_cleaned)[97] <- "AGE_G"
names(brfss_2017_cleaned)[98] <- "HT_COMP_IN"
names(brfss_2017_cleaned)[99] <- "HT_COMP_M"
names(brfss_2017_cleaned)[100] <- "WT_COMP_KILO"
names(brfss_2017_cleaned)[101] <- "BMI"
names(brfss_2017_cleaned)[102] <- "BMI_CAT"
names(brfss_2017_cleaned)[103] <- "BMI_OVER"
names(brfss_2017_cleaned)[104] <- "CHILD_COMP"
names(brfss_2017_cleaned)[105] <- "EDUCA_COMP"
names(brfss_2017_cleaned)[106] <- "INCOME_COMP"
names(brfss_2017_cleaned)[107] <- "SMOKER_COMP"
names(brfss_2017_cleaned)[108] <- "SMOKENOW_COMP"
names(brfss_2017_cleaned)[109] <- "ECIG_COMP"
names(brfss_2017_cleaned)[110] <- "ECIG_NOW_COMP"
names(brfss_2017_cleaned)[111] <- "DRINKANY_30"
names(brfss_2017_cleaned)[112] <- "DROCDY3"
names(brfss_2017_cleaned)[113] <- "BINGE_COMP"
names(brfss_2017_cleaned)[114] <- "WEEKLY_DRINK"
names(brfss_2017_cleaned)[115] <- "HEAVY_DRINK"
names(brfss_2017_cleaned)[116] <- "FRUITJUICE_COMP"
names(brfss_2017_cleaned)[117] <- "FRUITJUICE_COMP2"
names(brfss_2017_cleaned)[118] <- "GREEN_VEG_COMP"
names(brfss_2017_cleaned)[119] <- "FRENCHF_COMP"
names(brfss_2017_cleaned)[120] <- "POTATO_COMP"
names(brfss_2017_cleaned)[121] <- "OTHER_VEG_COMP"
names(brfss_2017_cleaned)[122] <- "MISSING_FRUIT"
names(brfss_2017_cleaned)[123] <- "MISSING_VEG"
names(brfss_2017_cleaned)[124] <- "MISS_ANY_FRUIT"
names(brfss_2017_cleaned)[125] <- "MISS_ANY_VEG"
names(brfss_2017_cleaned)[126] <- "TOTAL_FRUIT"
names(brfss_2017_cleaned)[127] <- "TOTAL_VEG"
names(brfss_2017_cleaned)[128] <- "ATLEAST1_FRUIT"
names(brfss_2017_cleaned)[129] <- "ATLEAST1_VEG"
names(brfss_2017_cleaned)[130] <- "MORE16_FRUIT"
names(brfss_2017_cleaned)[131] <- "MORE23_VEG"
names(brfss_2017_cleaned)[132] <- "FRUIT_EXCLUDE"
names(brfss_2017_cleaned)[133] <- "VEG_EXCLUDE"
names(brfss_2017_cleaned)[134] <- "LEISURE_COMP"
names(brfss_2017_cleaned)[135] <- "MAX_OXYGEN"
names(brfss_2017_cleaned)[136] <- "FUNC_CAPACITY"
names(brfss_2017_cleaned)[137] <- "STRENGTH_FREQ"
names(brfss_2017_cleaned)[138] <- "MISSING_PHYS"
names(brfss_2017_cleaned)[139] <- "PHYS_CATEGORY"
names(brfss_2017_cleaned)[140] <- "PHYS_IDX"
names(brfss_2017_cleaned)[141] <- "150_PHYS_COMP"
names(brfss_2017_cleaned)[142] <- "300_PHYS_COMP"
names(brfss_2017_cleaned)[143] <- "300_PHYS2_COMP"
names(brfss_2017_cleaned)[144] <- "MUSCLE_RECOMMEND"
names(brfss_2017_cleaned)[145] <- "AEROBIC_STRENGTH"
names(brfss_2017_cleaned)[146] <- "AEROBIC_STRENGTH2"
names(brfss_2017_cleaned)[147] <- "SEATBELT_COMP"
names(brfss_2017_cleaned)[148] <- "SEATBELT_COMP2"
names(brfss_2017_cleaned)[149] <- "AIDSTEST_COMP"
head(brfss_2017_cleaned)
# Remove certain calculated variables
brfss_2017_cleaned <- brfss_2017_cleaned %>%
select(-c(35, 36, 43, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149))
# Remove SEQNO since it's a unique identifier
brfss_2017_cleaned <- brfss_2017_cleaned %>%
select(-c(SEQNO))
# Filter for only asthmatics
brfss_2017_cleaned <- brfss_2017_cleaned %>%
filter(ASTHMA == 1)
# Correlation for all variables
round(cor(brfss_2017_cleaned), digits = 2)
# Create model for VIF
vif_model <- lm(ECIG_COMP ~ AGE80 + BMI + SMOKER_COMP + STATE + ADDEPEV + ALCDAY5 + CHCCOPD + CHECKUP + EDUCA + GENHLTH + HLTHPLN + INCOME + SEX, data = brfss_2017_cleaned)
# Calculating VIF
vif_values <- vif(vif_model)
vif_values
# Visualizing the model
plot(vif_model, which = 1, main = "Model Fit")
# Visualizing VIF
barplot(vif_values, las = 2, col = "skyblue", main = "Variance Inflation Factor (VIF)")
# Creating a correlation matrix
cor_matrix <- cor(brfss_2017_cleaned[c('AGE80', 'BMI', 'SMOKER_COMP', 'STATE', 'ADDEPEV', 'ALCDAY5',
'CHCCOPD', 'CHECKUP', 'EDUCA', 'GENHLTH', 'HLTHPLN', 'INCOME', 'SEX')])
# Visualizing the correlation matrix
image(cor_matrix, main = "Correlation Matrix", col = colorRampPalette(c("blue", "white", "red"))(20))
set.seed(123)
split <- sample(nrow(brfss_2017_cleaned), 0.6 * nrow(brfss_2017_cleaned))
train <- brfss_2017_cleaned[split, ]
test <- brfss_2017_cleaned[-split, ]
train
missing_summary_train <- train %>%
miss_var_summary()
library(haven)
library(mice) # For imputation
library(tidyverse)
library(caret)
library(glmnet)
library(parameters)
library(see)
library(lmtest)  # For assumption testing
library(ggplot2)
library(car)  # For Variance Inflation Factor (VIF)
brfss_2017 <- read_xpt("LLCP2017.XPT")
head(brfss_2017)
colnames(brfss_2017)
brfss_2017_cleaned <- brfss_2017 %>%
select(-c(2:6), -c(10:27), -31, -37, -40, -45, -c(53:57), -c(62:64), -72, -c(80:82), -85, -c(87:89), -c(97:102), -106, -108, -110, -c(112:246), ... = -c(255:258), -c(326:327), -c(330:337), -c(340:345), -c(356:357))
head(brfss_2017_cleaned)
names(brfss_2017_cleaned)[1] <- "STATE"
names(brfss_2017_cleaned)[4] <- "PSU"
names(brfss_2017_cleaned)[8] <- "HLTHPLN"
names(brfss_2017_cleaned)[9] <- "PERSDOC"
names(brfss_2017_cleaned)[11] <- "CHECKUP"
names(brfss_2017_cleaned)[12] <- "BPHIGH"
names(brfss_2017_cleaned)[13] <- "CHOLCHK"
names(brfss_2017_cleaned)[14] <- "TOLDHI"
names(brfss_2017_cleaned)[15] <- "CVDINFR"
names(brfss_2017_cleaned)[16] <- "CVDCRHD"
names(brfss_2017_cleaned)[17] <- "CVDSTRK"
names(brfss_2017_cleaned)[18] <- "ASTHMA"
names(brfss_2017_cleaned)[21] <- "CHCCOPD"
names(brfss_2017_cleaned)[22] <- "HAVARTH"
names(brfss_2017_cleaned)[23] <- "ADDEPEV"
names(brfss_2017_cleaned)[25] <- "DIABETES"
names(brfss_2017_cleaned)[29] <- "RENTHOME"
names(brfss_2017_cleaned)[30] <- "VETERAN"
names(brfss_2017_cleaned)[31] <- "EMPLOYED"
names(brfss_2017_cleaned)[33] <- "INCOME"
names(brfss_2017_cleaned)[35] <- "WEIGHT"
names(brfss_2017_cleaned)[36] <- "HEIGHT"
names(brfss_2017_cleaned)[44] <- "USENOW"
names(brfss_2017_cleaned)[47] <- "FRUIT"
names(brfss_2017_cleaned)[48] <- "FRUIT_JUICE"
names(brfss_2017_cleaned)[49] <- "GREEN_VEG"
names(brfss_2017_cleaned)[50] <- "FRENCHF"
names(brfss_2017_cleaned)[51] <- "POTATO"
names(brfss_2017_cleaned)[52] <- "OTHER_VEG"
names(brfss_2017_cleaned)[53] <- "EXERCISE_ANY"
names(brfss_2017_cleaned)[56] <- "FLUSHOT"
names(brfss_2017_cleaned)[57] <- "PNEUMONIA_VAC"
names(brfss_2017_cleaned)[58] <- "HIVTEST"
names(brfss_2017_cleaned)[59] <- "HIVRISK"
names(brfss_2017_cleaned)[63] <- "STSTR"
names(brfss_2017_cleaned)[64] <- "STRATUM_WGHT"
names(brfss_2017_cleaned)[65] <- "RAWRAKE"
names(brfss_2017_cleaned)[66] <- "WT2RAKE"
names(brfss_2017_cleaned)[67] <- "IMPRACE"
names(brfss_2017_cleaned)[68] <- "DUALUSE"
names(brfss_2017_cleaned)[69] <- "DUALCOR"
names(brfss_2017_cleaned)[70] <- "LLCPWT2"
names(brfss_2017_cleaned)[71] <- "LLCPWT"
names(brfss_2017_cleaned)[72] <- "RFHLTH"
names(brfss_2017_cleaned)[73] <- "PHYS_COMP"
names(brfss_2017_cleaned)[74] <- "MENT_COMP"
names(brfss_2017_cleaned)[75] <- "HCVU651"
names(brfss_2017_cleaned)[76] <- "RFHYPES"
names(brfss_2017_cleaned)[77] <- "CHOLCH1"
names(brfss_2017_cleaned)[78] <- "HICHOL_COMP"
names(brfss_2017_cleaned)[79] <- "MI_CHD"
names(brfss_2017_cleaned)[80] <- "ASTHMA_LIFE"
names(brfss_2017_cleaned)[81] <- "ASTHMA_NOW_COMP"
names(brfss_2017_cleaned)[82] <- "ASTHMA_COMP"
names(brfss_2017_cleaned)[83] <- "ARTHRITIS_DIAGNOS"
names(brfss_2017_cleaned)[84] <- "LIMIT_ACTIVITY"
names(brfss_2017_cleaned)[85] <- "LIMIT_WORK"
names(brfss_2017_cleaned)[86] <- "LIMIT_SOCIAL"
names(brfss_2017_cleaned)[87] <- "PRACE_COMP"
names(brfss_2017_cleaned)[88] <- "MULTI_RACE"
names(brfss_2017_cleaned)[89] <- "HISPANIC_COMP"
names(brfss_2017_cleaned)[90] <- "RACE_COMP"
names(brfss_2017_cleaned)[91] <- "RACEG21"
names(brfss_2017_cleaned)[92] <- "RACEGR3"
names(brfss_2017_cleaned)[93] <- "RACE_G1"
names(brfss_2017_cleaned)[94] <- "AGEG5YR"
names(brfss_2017_cleaned)[95] <- "AGE65YR"
names(brfss_2017_cleaned)[96] <- "AGE80"
names(brfss_2017_cleaned)[97] <- "AGE_G"
names(brfss_2017_cleaned)[98] <- "HT_COMP_IN"
names(brfss_2017_cleaned)[99] <- "HT_COMP_M"
names(brfss_2017_cleaned)[100] <- "WT_COMP_KILO"
names(brfss_2017_cleaned)[101] <- "BMI"
names(brfss_2017_cleaned)[102] <- "BMI_CAT"
names(brfss_2017_cleaned)[103] <- "BMI_OVER"
names(brfss_2017_cleaned)[104] <- "CHILD_COMP"
names(brfss_2017_cleaned)[105] <- "EDUCA_COMP"
names(brfss_2017_cleaned)[106] <- "INCOME_COMP"
names(brfss_2017_cleaned)[107] <- "SMOKER_COMP"
names(brfss_2017_cleaned)[108] <- "SMOKENOW_COMP"
names(brfss_2017_cleaned)[109] <- "ECIG_COMP"
names(brfss_2017_cleaned)[110] <- "ECIG_NOW_COMP"
names(brfss_2017_cleaned)[111] <- "DRINKANY_30"
names(brfss_2017_cleaned)[112] <- "DROCDY3"
names(brfss_2017_cleaned)[113] <- "BINGE_COMP"
names(brfss_2017_cleaned)[114] <- "WEEKLY_DRINK"
names(brfss_2017_cleaned)[115] <- "HEAVY_DRINK"
names(brfss_2017_cleaned)[116] <- "FRUITJUICE_COMP"
names(brfss_2017_cleaned)[117] <- "FRUITJUICE_COMP2"
names(brfss_2017_cleaned)[118] <- "GREEN_VEG_COMP"
names(brfss_2017_cleaned)[119] <- "FRENCHF_COMP"
names(brfss_2017_cleaned)[120] <- "POTATO_COMP"
names(brfss_2017_cleaned)[121] <- "OTHER_VEG_COMP"
names(brfss_2017_cleaned)[122] <- "MISSING_FRUIT"
names(brfss_2017_cleaned)[123] <- "MISSING_VEG"
names(brfss_2017_cleaned)[124] <- "MISS_ANY_FRUIT"
names(brfss_2017_cleaned)[125] <- "MISS_ANY_VEG"
names(brfss_2017_cleaned)[126] <- "TOTAL_FRUIT"
names(brfss_2017_cleaned)[127] <- "TOTAL_VEG"
names(brfss_2017_cleaned)[128] <- "ATLEAST1_FRUIT"
names(brfss_2017_cleaned)[129] <- "ATLEAST1_VEG"
names(brfss_2017_cleaned)[130] <- "MORE16_FRUIT"
names(brfss_2017_cleaned)[131] <- "MORE23_VEG"
names(brfss_2017_cleaned)[132] <- "FRUIT_EXCLUDE"
names(brfss_2017_cleaned)[133] <- "VEG_EXCLUDE"
names(brfss_2017_cleaned)[134] <- "LEISURE_COMP"
names(brfss_2017_cleaned)[135] <- "MAX_OXYGEN"
names(brfss_2017_cleaned)[136] <- "FUNC_CAPACITY"
names(brfss_2017_cleaned)[137] <- "STRENGTH_FREQ"
names(brfss_2017_cleaned)[138] <- "MISSING_PHYS"
names(brfss_2017_cleaned)[139] <- "PHYS_CATEGORY"
names(brfss_2017_cleaned)[140] <- "PHYS_IDX"
names(brfss_2017_cleaned)[141] <- "150_PHYS_COMP"
names(brfss_2017_cleaned)[142] <- "300_PHYS_COMP"
names(brfss_2017_cleaned)[143] <- "300_PHYS2_COMP"
names(brfss_2017_cleaned)[144] <- "MUSCLE_RECOMMEND"
names(brfss_2017_cleaned)[145] <- "AEROBIC_STRENGTH"
names(brfss_2017_cleaned)[146] <- "AEROBIC_STRENGTH2"
names(brfss_2017_cleaned)[147] <- "SEATBELT_COMP"
names(brfss_2017_cleaned)[148] <- "SEATBELT_COMP2"
names(brfss_2017_cleaned)[149] <- "AIDSTEST_COMP"
head(brfss_2017_cleaned)
# Remove certain calculated variables
brfss_2017_cleaned <- brfss_2017_cleaned %>%
select(-c(35, 36, 43, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149))
# Remove SEQNO since it's a unique identifier
brfss_2017_cleaned <- brfss_2017_cleaned %>%
select(-c(SEQNO))
# Filter for only asthmatics
brfss_2017_cleaned <- brfss_2017_cleaned %>%
filter(ASTHMA == 1)
# Correlation for all variables
round(cor(brfss_2017_cleaned), digits = 2)
# Create model for VIF
vif_model <- lm(ECIG_COMP ~ AGE80 + BMI + SMOKER_COMP + STATE + ADDEPEV + ALCDAY5 + CHCCOPD + CHECKUP + EDUCA + GENHLTH + HLTHPLN + INCOME + SEX, data = brfss_2017_cleaned)
# Calculating VIF
vif_values <- vif(vif_model)
vif_values
# Visualizing the model
plot(vif_model, which = 1, main = "Model Fit")
# Visualizing VIF
barplot(vif_values, las = 2, col = "skyblue", main = "Variance Inflation Factor (VIF)")
# Creating a correlation matrix
cor_matrix <- cor(brfss_2017_cleaned[c('AGE80', 'BMI', 'SMOKER_COMP', 'STATE', 'ADDEPEV', 'ALCDAY5',
'CHCCOPD', 'CHECKUP', 'EDUCA', 'GENHLTH', 'HLTHPLN', 'INCOME', 'SEX')])
# Visualizing the correlation matrix
image(cor_matrix, main = "Correlation Matrix", col = colorRampPalette(c("blue", "white", "red"))(20))
set.seed(123)
split <- sample(nrow(brfss_2017_cleaned), 0.6 * nrow(brfss_2017_cleaned))
train <- brfss_2017_cleaned[split, ]
test <- brfss_2017_cleaned[-split, ]
# Calculate imputed values with training data
methods(mice)
imp <- mice(train, method = "cart", m = 1, maxit = 1, seed = 123)
#imputed_values <- mice(train, method = "rf)
complete(imp)
train <- complete(imp)
train
predictor_vars <- c('AGE80', 'BMI', 'SMOKER_COMP', 'STATE', 'ADDEPEV', 'ALCDAY5',
'CHCCOPD', 'CHECKUP', 'EDUCA', 'GENHLTH', 'HLTHPLN', 'INCOME', 'SEX')
x_train <- data.matrix(train[, predictor_vars])
y_train <- train$ECIG_COMP
# Combine x_train and y_train into one data frame
train_lm <- data.frame(y_train, x_train)
# Fit the model properly using all predictors
model <- lm(y_train ~ ., data = train_lm)
summary(model)
# Residual plots
plot(model)
# Test for Autocorrelation
dwtest(model)
# Remove rows with missing values in either predictors or target
complete_rows <- complete.cases(x_train, y_train)
x_train_clean <- x_train[complete_rows, ]
y_train_clean <- y_train[complete_rows]
# Then run cross-validation
cv_model <- train(x = x_train_clean, y = y_train_clean,
method = "glmnet",
trControl = trainControl(method = "cv", number = 5))
print(cv_model)
# Rebuild x_test
x_test <- test[, predictor_vars]
x_test <- data.frame(x_test)
# Predict using the linear model
predictions <- predict(model, newdata = x_test)
# Remove any rows with NA values in either predictions or actual values
valid_rows <- complete.cases(predictions, test$ECIG_COMP)
y_test_clean <- test$ECIG_COMP[valid_rows]
predictions_clean <- predictions[valid_rows]
# Calculate RMSE
rmse_train <- sqrt(mean((y_train - predict(model))^2))
rmse_test <- sqrt(mean((y_test_clean - predictions_clean)^2))
print(paste("Train RMSE:", round(rmse_train, 3)))
print(paste("Test RMSE:", round(rmse_test, 3)))
# Define RMSE values
rmse_train <- 1.253
rmse_test <- 0.513
# Create data frame
rmse_data <- data.frame(
Dataset = c("Train RMSE", "Test RMSE"),
RMSE = c(rmse_train, rmse_test)
)
# Create the bar plot
ggplot(rmse_data, aes(x = Dataset, y = RMSE)) +
geom_bar(stat = "identity", fill = "orange", width = 0.6) +
geom_text(aes(label = round(RMSE, 3)), vjust = -0.5, size = 5) +
labs(
title = "Root Mean Squared Error (RMSE)",
y = "RMSE Value",
x = NULL
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(hjust = 0.5),
legend.position = "none"
)
