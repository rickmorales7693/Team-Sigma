'21' = 'KY',
'22' = 'LA',
'23' = 'ME',
'24' = 'MD',
'25' = 'MA',
'26' = 'MI',
'27' = 'MN',
'28' = 'MS',
'29' = 'MO',
'30' = 'MT',
'31' = 'NE',
'32' = 'NV',
'33' = 'NH',
'34' = 'NJ',
'35' = 'NM',
'36' = 'NY',
'37' = 'NC',
'38' = 'ND',
'39' = 'OH',
'40' = 'OK',
'41' = 'OR',
'42' = 'PA',
'44' = 'RI',
'45' = 'SC',
'46' = 'SD',
'47' = 'TN',
'48' = 'TX',
'49' = 'UT',
'50' = 'VT',
'51' = 'VA',
'53' = 'WA',
'54' = 'WV',
'55' = 'WI',
'56' = 'WY',
'66' = 'GU',
'72' = 'PR')
df <- df %>%
filter(ASTHMA_NOW_COMP == 1)
# Use updated predictor set per professor feedback
predictors <- c('AGE80', 'BMI', 'SMOKER_COMP', 'STATE', 'ADDEPEV', 'CHCCOPD', 'CHECKUP', 'GENHLTH', 'HLTHPLN', 'EDUCA_COMP', 'INCOME_COMP', 'SEX', 'WEEKLY_DRINK')
x <- data.matrix(df[, predictors])
y <- df$ECIG_COMP
data <- data.frame(x, y)
model <- lm(y ~ ., data = data)
plot(model)
result <- model_parameters(model)
result
plot(result)
coefficients <- coef(model)
slope <- coefficients[2]
intercept <- coefficients[1]
predictions <- predict(model, newdata = data.frame(x))
actual_values <- data$y
squared_error_loss <- sum((actual_values - predictions)^2)
mse <- mean((actual_values - predictions)^2)
mse
cv_model <- cv.glmnet(x, y, alpha = 1)
plot(cv_model)
random_values <- rnorm(n = nrow(df), mean = 0, sd = 1)
optimal_ratio <- splitratio(random_values, y, method = "regression")
optimal_ratio
set.seed(123)
split <- sort(sample(nrow(df), nrow(df) * 0.6))
train <- df[split, ]
test <- df[-split, ]
calcSplitRatio <- function(p = NA, df) {
if (is.na(p)) {
p <- ncol(df) - 1
}
test_prop <- round((1 / sqrt(p)), 2)
train_prop <- 1 - test_prop
print(paste0("The ideal split ratio is ", train_prop, ":", test_prop, " training:testing"))
set.seed(123)
sample_index <- sample(seq_len(nrow(df)), size = floor(train_prop * nrow(df)))
train <- df[sample_index, ]
test <- df[-sample_index, ]
return(list(
train_prop = train_prop,
test_prop = test_prop,
train = train,
test = test
))
}
result <- calcSplitRatio(df = df)
df <- df %>%
select(-STATE_ABBR, -VapeStatus)
df$log_x <- log(df$ECIG_COMP)
df$sqrt_x <- sqrt(df$ECIG_COMP)
preprocessed_data <- preProcess(df[, c('AGE80', 'BMI', 'SMOKER_COMP', 'STATE', 'ADDEPEV', 'CHCCOPD', 'CHECKUP', 'GENHLTH', 'HLTHPLN', 'EDUCA_COMP', 'INCOME_COMP', 'SEX', 'WEEKLY_DRINK', 'ECIG_COMP')], method = "range")
transformed_data <- predict(preprocessed_data, df)
print(transformed_data)
numerical_data <- transformed_data %>%
select(where(is.numeric)) %>%
select(where(~ var(.x, na.rm = TRUE) != 0))
numerical_data <- numerical_data %>%
filter_all(all_vars(is.finite(.))) %>%
na.omit()
pca <- princomp(numerical_data)
summary(pca)
pca$loadings[, 1:2]
fviz_eig(pca, addlabels = TRUE)
kmeans_data <- transformed_data %>%
select(where(is.numeric)) %>%
select(where(~ var(.x, na.rm = TRUE) != 0)) %>%
na.omit()
set.seed(123)
kmeans_result <- kmeans(kmeans_data, centers = 3, nstart = 25)
fviz_cluster(kmeans_result,
data = kmeans_data,
palette = c("red", "blue", "green"),
geom = "point",
pointsize = 1.2,
ellipse.type = "t",
show.clust.cent = TRUE,
ggtheme = theme_minimal()) +
labs(title = "K-Means Clustering of BRFSS Data (k = 3)")
kmeans_data$Cluster <- as.factor(kmeans_result$cluster)
kmeans_data %>%
group_by(Cluster) %>%
summarise(across(c(AGE80, BMI, WEEKLY_DRINK), mean, na.rm = TRUE))
library(haven)
library(dplyr)
library(ggplot2)
library(glmnet)
library(parameters)
library(see)
library(car)
library(caret)
# 2. Load Data
```{r}
library(haven)
library(dplyr)
library(ggplot2)
library(glmnet)
library(parameters)
library(see)
library(car)
library(caret)
brfss_2017 <- read_xpt("LLCP2017.XPT")
brfss_2017[is.na(brfss_2017)] <- 0
df <- brfss_2017 %>%
filter(!is.na(`_ECIGSTS`)) %>%
mutate(ECIG_COMP = `_ECIGSTS`,
VapeStatus = factor(ECIG_COMP,
levels = c(1, 2, 3, 4, 9),
labels = c("Current User", "Current User", "Former User", "Never Used", "No Response"))) %>%
filter(`_ASTHMS1` == 1) # ASTHMA_NOW_COMP proxy
predictors <- c('AGE80', 'BMI', 'SMOKER_COMP', 'STATE', 'ADDEPEV', 'CHCCOPD',
'CHECKUP', 'GENHLTH', 'HLTHPLN', 'EDUCA_COMP', 'INCOME_COMP',
'SEX', 'WEEKLY_DRINK')
x <- data.matrix(df[, predictors])
library(haven)
library(dplyr)
library(ggplot2)
library(glmnet)
library(parameters)
library(see)
library(car)
library(caret)
brfss_2017 <- read_xpt("LLCP2017.XPT")
brfss_2017_cleaned <- brfss_2017 %>%
select(-c(2:6), -c(10:27), -31, -37, -40, -45, -c(53:57), -c(62:64), -72,
-c(80:82), -85, -c(87:89), -c(97:102), -106, -108, -110, -c(112:246),
-c(255:258), -c(326:327), -c(330:337), -c(340:345), -c(356:357))
names(brfss_2017_cleaned)[1] <- "STATE"
names(brfss_2017_cleaned)[4] <- "PSU"
names(brfss_2017_cleaned)[8] <- "HLTHPLN"
names(brfss_2017_cleaned)[9] <- "PERSDOC"
names(brfss_2017_cleaned)[11] <- "CHECKUP"
names(brfss_2017_cleaned)[12] <- "BPHIGH"
names(brfss_2017_cleaned)[13] <- "CHOLCHK"
names(brfss_2017_cleaned)[14] <- "TOLDHI"
names(brfss_2017_cleaned)[15] <- "CVDINFR"
names(brfss_2017_cleaned)[16] <- "CVDCRHD"
names(brfss_2017_cleaned)[17] <- "CVDSTRK"
names(brfss_2017_cleaned)[18] <- "ASTHMA"
names(brfss_2017_cleaned)[21] <- "CHCCOPD"
names(brfss_2017_cleaned)[22] <- "HAVARTH"
names(brfss_2017_cleaned)[23] <- "ADDEPEV"
names(brfss_2017_cleaned)[25] <- "DIABETES"
names(brfss_2017_cleaned)[29] <- "RENTHOME"
names(brfss_2017_cleaned)[30] <- "VETERAN"
names(brfss_2017_cleaned)[31] <- "EMPLOYED"
names(brfss_2017_cleaned)[33] <- "INCOME"
names(brfss_2017_cleaned)[35] <- "WEIGHT"
names(brfss_2017_cleaned)[36] <- "HEIGHT"
names(brfss_2017_cleaned)[44] <- "USENOW"
names(brfss_2017_cleaned)[47] <- "FRUIT"
names(brfss_2017_cleaned)[48] <- "FRUIT_JUICE"
names(brfss_2017_cleaned)[49] <- "GREEN_VEG"
names(brfss_2017_cleaned)[50] <- "FRENCHF"
names(brfss_2017_cleaned)[51] <- "POTATO"
names(brfss_2017_cleaned)[52] <- "OTHER_VEG"
names(brfss_2017_cleaned)[53] <- "EXERCISE_ANY"
names(brfss_2017_cleaned)[56] <- "FLUSHOT"
names(brfss_2017_cleaned)[57] <- "PNEUMONIA_VAC"
names(brfss_2017_cleaned)[58] <- "HIVTEST"
names(brfss_2017_cleaned)[59] <- "HIVRISK"
names(brfss_2017_cleaned)[81] <- "ASTHMA_NOW_COMP"
names(brfss_2017_cleaned)[96] <- "AGE80"
names(brfss_2017_cleaned)[101] <- "BMI"
names(brfss_2017_cleaned)[105] <- "EDUCA_COMP"
names(brfss_2017_cleaned)[106] <- "INCOME_COMP"
names(brfss_2017_cleaned)[107] <- "SMOKER_COMP"
names(brfss_2017_cleaned)[109] <- "ECIG_COMP"
names(brfss_2017_cleaned)[114] <- "WEEKLY_DRINK"
names(brfss_2017_cleaned)[90] <- "GENHLTH"
head(brfss_2017_cleaned)
brfss_2017_cleaned[is.na(brfss_2017_cleaned)] <- 0
df <- brfss_2017_cleaned %>%
filter(ECIG_COMP != 0 & ASTHMA_NOW_COMP == 1)
anyDuplicated(colnames(brfss_2017_cleaned))
# Ensure unique column names
colnames(brfss_2017_cleaned) <- make.names(colnames(brfss_2017_cleaned), unique = TRUE)
# Replace NAs
brfss_2017_cleaned[is.na(brfss_2017_cleaned)] <- 0
# Filter for ECIG_COMP values and asthmatic respondents
df <- brfss_2017_cleaned %>%
filter(ECIG_COMP != 0 & ASTHMA_NOW_COMP == 1)
predictors <- c("AGE80", "BMI", "SMOKER_COMP", "STATE", "ADDEPEV",
"CHCCOPD", "CHECKUP", "GENHLTH", "HLTHPLN",
"EDUCA_COMP", "INCOME_COMP", "SEX", "WEEKLY_DRINK")
x <- data.matrix(df[, predictors])
y <- df$ECIG_COMP
data <- data.frame(x, y)
model <- lm(y ~ ., data = data)
summary(model)
# Visualize residuals
plot(model)
# Check model parameters
model_parameters(model)
# VIF (multicollinearity)
vif(model)
set.seed(123)
cv_model <- train(
x = x,
y = y,
method = "glmnet",
trControl = trainControl(method = "cv", number = 5)
)
print(cv_model)
predictions <- predict(model, newdata = data.frame(x))
actual_values <- y
rmse <- sqrt(mean((actual_values - predictions)^2))
print(paste("Train RMSE:", round(rmse, 3)))
library(haven)
library(dplyr)
library(ggplot2)
library(glmnet)
library(parameters)
library(see)
library(car)
library(caret)
brfss_2017 <- read_xpt("LLCP2017.XPT")
brfss_2017_cleaned <- brfss_2017 %>%
select(-c(2:6), -c(10:27), -31, -37, -40, -45, -c(53:57), -c(62:64), -72,
-c(80:82), -85, -c(87:89), -c(97:102), -106, -108, -110, -c(112:246),
-c(255:258), -c(326:327), -c(330:337), -c(340:345), -c(356:357))
names(brfss_2017_cleaned)[1] <- "STATE"
names(brfss_2017_cleaned)[4] <- "PSU"
names(brfss_2017_cleaned)[8] <- "HLTHPLN"
names(brfss_2017_cleaned)[9] <- "PERSDOC"
names(brfss_2017_cleaned)[11] <- "CHECKUP"
names(brfss_2017_cleaned)[12] <- "BPHIGH"
names(brfss_2017_cleaned)[13] <- "CHOLCHK"
names(brfss_2017_cleaned)[14] <- "TOLDHI"
names(brfss_2017_cleaned)[15] <- "CVDINFR"
names(brfss_2017_cleaned)[16] <- "CVDCRHD"
names(brfss_2017_cleaned)[17] <- "CVDSTRK"
names(brfss_2017_cleaned)[18] <- "ASTHMA"
names(brfss_2017_cleaned)[21] <- "CHCCOPD"
names(brfss_2017_cleaned)[22] <- "HAVARTH"
names(brfss_2017_cleaned)[23] <- "ADDEPEV"
names(brfss_2017_cleaned)[25] <- "DIABETES"
names(brfss_2017_cleaned)[29] <- "RENTHOME"
names(brfss_2017_cleaned)[30] <- "VETERAN"
names(brfss_2017_cleaned)[31] <- "EMPLOYED"
names(brfss_2017_cleaned)[33] <- "INCOME"
names(brfss_2017_cleaned)[35] <- "WEIGHT"
names(brfss_2017_cleaned)[36] <- "HEIGHT"
names(brfss_2017_cleaned)[44] <- "USENOW"
names(brfss_2017_cleaned)[47] <- "FRUIT"
names(brfss_2017_cleaned)[48] <- "FRUIT_JUICE"
names(brfss_2017_cleaned)[49] <- "GREEN_VEG"
names(brfss_2017_cleaned)[50] <- "FRENCHF"
names(brfss_2017_cleaned)[51] <- "POTATO"
names(brfss_2017_cleaned)[52] <- "OTHER_VEG"
names(brfss_2017_cleaned)[53] <- "EXERCISE_ANY"
names(brfss_2017_cleaned)[56] <- "FLUSHOT"
names(brfss_2017_cleaned)[57] <- "PNEUMONIA_VAC"
names(brfss_2017_cleaned)[58] <- "HIVTEST"
names(brfss_2017_cleaned)[59] <- "HIVRISK"
names(brfss_2017_cleaned)[81] <- "ASTHMA_NOW_COMP"
names(brfss_2017_cleaned)[96] <- "AGE80"
names(brfss_2017_cleaned)[101] <- "BMI"
names(brfss_2017_cleaned)[105] <- "EDUCA_COMP"
names(brfss_2017_cleaned)[106] <- "INCOME_COMP"
names(brfss_2017_cleaned)[107] <- "SMOKER_COMP"
names(brfss_2017_cleaned)[109] <- "ECIG_COMP"
names(brfss_2017_cleaned)[114] <- "WEEKLY_DRINK"
names(brfss_2017_cleaned)[90] <- "GENHLTH"
head(brfss_2017_cleaned)
# Ensure unique column names
colnames(brfss_2017_cleaned) <- make.names(colnames(brfss_2017_cleaned), unique = TRUE)
# Replace NAs
brfss_2017_cleaned[is.na(brfss_2017_cleaned)] <- 0
# Filter for ECIG_COMP values and asthmatic respondents
df <- brfss_2017_cleaned %>%
filter(ECIG_COMP != 0 & ASTHMA_NOW_COMP == 1)
predictors <- c("AGE80", "BMI", "SMOKER_COMP", "STATE", "ADDEPEV",
"CHCCOPD", "CHECKUP", "GENHLTH", "HLTHPLN",
"EDUCA_COMP", "INCOME_COMP", "SEX", "WEEKLY_DRINK")
x <- data.matrix(df[, predictors])
y <- df$ECIG_COMP
data <- data.frame(x, y)
model <- lm(y ~ ., data = data)
summary(model)
# Visualize residuals
plot(model)
# Check model parameters
model_parameters(model)
# VIF (multicollinearity)
vif(model)
set.seed(123)
cv_model <- train(
x = x,
y = y,
method = "glmnet",
trControl = trainControl(method = "cv", number = 5)
)
print(cv_model)
predictions <- predict(model, newdata = data.frame(x))
actual_values <- y
rmse <- sqrt(mean((actual_values - predictions)^2))
print(paste("Train RMSE:", round(rmse, 3)))
# Residual Plot
ggplot(data.frame(resid = residuals(model)), aes(x = resid)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
labs(title = "Residuals Distribution", x = "Residuals")
# Coefficient Importance Plot
coef_df <- data.frame(Variable = names(coef(model))[-1], Coefficient = coef(model)[-1])
ggplot(coef_df, aes(x = reorder(Variable, abs(Coefficient)), y = Coefficient)) +
geom_col(fill = "orange") +
coord_flip() +
labs(title = "Coefficient Estimates", x = "Variables", y = "Coefficient")
# Residual Plot
ggplot(data.frame(resid = residuals(model)), aes(x = resid)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
labs(title = "Residuals Distribution", x = "Residuals")
# Coefficient Importance Plot
coef_df <- data.frame(Variable = names(coef(model))[-1], Coefficient = coef(model)[-1])
ggplot(coef_df, aes(x = reorder(Variable, abs(Coefficient)), y = Coefficient)) +
geom_col(fill = "orange") +
coord_flip() +
labs(title = "Coefficient Estimates", x = "Variables", y = "Coefficient")
df$ECIG_BINARY <- ifelse(df$ECIG_COMP == 1 | df$ECIG_COMP == 2, 1, 0)
log_model <- glm(ECIG_BINARY ~ ., data = data.frame(df[, predictors], ECIG_BINARY = df$ECIG_BINARY), family = "binomial")
summary(log_model)
probs <- predict(log_model, type = "response")
roc_obj <- roc(df$ECIG_BINARY, probs)
library(pROC)
probs <- predict(log_model, type = "response")
roc_obj <- roc(df$ECIG_BINARY, probs)
auc(roc_obj)
plot(roc_obj, col = "blue", lwd = 2, main = "ROC Curve")
abline(a = 0, b = 1, lty = 2, col = "gray")
library(haven)
library(dplyr)
library(ggplot2)
library(glmnet)
library(parameters)
library(see)
library(car)
library(caret)
library(pROC)
library(ggplot2)
brfss_2017 <- read_xpt("LLCP2017.XPT")
brfss_2017_cleaned <- brfss_2017 %>%
select(-c(2:6), -c(10:27), -31, -37, -40, -45, -c(53:57), -c(62:64), -72,
-c(80:82), -85, -c(87:89), -c(97:102), -106, -108, -110, -c(112:246),
-c(255:258), -c(326:327), -c(330:337), -c(340:345), -c(356:357))
names(brfss_2017_cleaned)[1] <- "STATE"
names(brfss_2017_cleaned)[4] <- "PSU"
names(brfss_2017_cleaned)[8] <- "HLTHPLN"
names(brfss_2017_cleaned)[9] <- "PERSDOC"
names(brfss_2017_cleaned)[11] <- "CHECKUP"
names(brfss_2017_cleaned)[12] <- "BPHIGH"
names(brfss_2017_cleaned)[13] <- "CHOLCHK"
names(brfss_2017_cleaned)[14] <- "TOLDHI"
names(brfss_2017_cleaned)[15] <- "CVDINFR"
names(brfss_2017_cleaned)[16] <- "CVDCRHD"
names(brfss_2017_cleaned)[17] <- "CVDSTRK"
names(brfss_2017_cleaned)[18] <- "ASTHMA"
names(brfss_2017_cleaned)[21] <- "CHCCOPD"
names(brfss_2017_cleaned)[22] <- "HAVARTH"
names(brfss_2017_cleaned)[23] <- "ADDEPEV"
names(brfss_2017_cleaned)[25] <- "DIABETES"
names(brfss_2017_cleaned)[29] <- "RENTHOME"
names(brfss_2017_cleaned)[30] <- "VETERAN"
names(brfss_2017_cleaned)[31] <- "EMPLOYED"
names(brfss_2017_cleaned)[33] <- "INCOME"
names(brfss_2017_cleaned)[35] <- "WEIGHT"
names(brfss_2017_cleaned)[36] <- "HEIGHT"
names(brfss_2017_cleaned)[44] <- "USENOW"
names(brfss_2017_cleaned)[47] <- "FRUIT"
names(brfss_2017_cleaned)[48] <- "FRUIT_JUICE"
names(brfss_2017_cleaned)[49] <- "GREEN_VEG"
names(brfss_2017_cleaned)[50] <- "FRENCHF"
names(brfss_2017_cleaned)[51] <- "POTATO"
names(brfss_2017_cleaned)[52] <- "OTHER_VEG"
names(brfss_2017_cleaned)[53] <- "EXERCISE_ANY"
names(brfss_2017_cleaned)[56] <- "FLUSHOT"
names(brfss_2017_cleaned)[57] <- "PNEUMONIA_VAC"
names(brfss_2017_cleaned)[58] <- "HIVTEST"
names(brfss_2017_cleaned)[59] <- "HIVRISK"
names(brfss_2017_cleaned)[81] <- "ASTHMA_NOW_COMP"
names(brfss_2017_cleaned)[96] <- "AGE80"
names(brfss_2017_cleaned)[101] <- "BMI"
names(brfss_2017_cleaned)[105] <- "EDUCA_COMP"
names(brfss_2017_cleaned)[106] <- "INCOME_COMP"
names(brfss_2017_cleaned)[107] <- "SMOKER_COMP"
names(brfss_2017_cleaned)[109] <- "ECIG_COMP"
names(brfss_2017_cleaned)[114] <- "WEEKLY_DRINK"
names(brfss_2017_cleaned)[90] <- "GENHLTH"
head(brfss_2017_cleaned)
# Ensure unique column names
colnames(brfss_2017_cleaned) <- make.names(colnames(brfss_2017_cleaned), unique = TRUE)
# Replace NAs
brfss_2017_cleaned[is.na(brfss_2017_cleaned)] <- 0
# Filter for ECIG_COMP values and asthmatic respondents
df <- brfss_2017_cleaned %>%
filter(ECIG_COMP != 0 & ASTHMA_NOW_COMP == 1)
predictors <- c("AGE80", "BMI", "SMOKER_COMP", "STATE", "ADDEPEV",
"CHCCOPD", "CHECKUP", "GENHLTH", "HLTHPLN",
"EDUCA_COMP", "INCOME_COMP", "SEX", "WEEKLY_DRINK")
x <- data.matrix(df[, predictors])
y <- df$ECIG_COMP
data <- data.frame(x, y)
model <- lm(y ~ ., data = data)
summary(model)
# Visualize residuals
plot(model)
# Check model parameters
model_parameters(model)
# VIF (multicollinearity)
vif(model)
set.seed(123)
cv_model <- train(
x = x,
y = y,
method = "glmnet",
trControl = trainControl(method = "cv", number = 5)
)
print(cv_model)
predictions <- predict(model, newdata = data.frame(x))
actual_values <- y
rmse <- sqrt(mean((actual_values - predictions)^2))
print(paste("Train RMSE:", round(rmse, 3)))
# Residual Plot
ggplot(data.frame(resid = residuals(model)), aes(x = resid)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
labs(title = "Residuals Distribution", x = "Residuals")
# Coefficient Importance Plot
coef_df <- data.frame(Variable = names(coef(model))[-1], Coefficient = coef(model)[-1])
ggplot(coef_df, aes(x = reorder(Variable, abs(Coefficient)), y = Coefficient)) +
geom_col(fill = "orange") +
coord_flip() +
labs(title = "Coefficient Estimates", x = "Variables", y = "Coefficient")
df$ECIG_BINARY <- ifelse(df$ECIG_COMP == 1 | df$ECIG_COMP == 2, 1, 0)
log_model <- glm(ECIG_BINARY ~ ., data = data.frame(df[, predictors], ECIG_BINARY = df$ECIG_BINARY), family = "binomial")
summary(log_model)
probs <- predict(log_model, type = "response")
roc_obj <- roc(df$ECIG_BINARY, probs)
auc(roc_obj)
plot(roc_obj, col = "blue", lwd = 2, main = "ROC Curve")
abline(a = 0, b = 1, lty = 2, col = "gray")
# Recalculate probabilities (if needed)
probs <- predict(log_model, type = "response")
# Create a dataframe for plotting
calib_data <- data.frame(
predicted = probs,
actual = factor(df$ECIG_BINARY)
)
# Use caret to create calibration data
calib <- calibration(actual ~ predicted, data = calib_data, class = "1", cuts = 10)
# Plot the calibration curve
ggplot(calib) +
geom_line(aes(x = midpoint, y = Percent), color = "blue", size = 1.2) +
geom_point(aes(x = midpoint, y = Percent), color = "blue", size = 2) +
geom_abline(slope = 1, intercept = 0, linetype = "dotted", color = "gray40") +
labs(title = "Calibration Plot",
x = "Predicted Probability",
y = "Observed Proportion (Current User)") +
theme_minimal(base_size = 14)
# Recalculate probabilities (if needed)
probs <- predict(log_model, type = "response")
# Create a dataframe for plotting
calib_data <- data.frame(
predicted = probs,
actual = factor(df$ECIG_BINARY)
)
# Use caret to create calibration data
calib <- calibration(actual ~ predicted, data = calib_data, class = "1", cuts = 10)
# Plot the calibration curve
ggplot(calib) +
geom_line(aes(x = midpoint, y = Percent), color = "blue", linewidth = 1.2) +
geom_point(aes(x = midpoint, y = Percent), color = "blue", size = 2) +
geom_abline(slope = 1, intercept = 0, linetype = "dotted", color = "gray40") +
labs(title = "Calibration Plot",
x = "Predicted Probability",
y = "Observed Proportion (Current User)") +
theme_minimal(base_size = 14)
