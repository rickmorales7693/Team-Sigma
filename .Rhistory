)
# Convert outcome to factor for classification
train_bin_nf$ECIG_BINARY <- factor(ifelse(train_bin_nf$ECIG_COMP == 1 | train_bin_nf$ECIG_COMP == 2, 1, 0))
# Train Random Forest model
set.seed(12)
rf_model_nf <- randomForest(
x = train_bin_nf[, predictors],
y = train_bin_nf$ECIG_BINARY,
ntree = 1000,          # number of trees
mtry = 2,              # number of variables per split (can tune)
nodesize = 4,          # minimum size of terminal nodes
importance = TRUE      # importance of predictors is assessed
)
# Convert outcome to factor for classification
train_bin_nf$ECIG_BINARY <- factor(ifelse(train_bin_nf$ECIG_COMP == 1 | train_bin_nf$ECIG_COMP == 2, 1, 0))
# Train Random Forest model
set.seed(12)
rf_model_nf <- randomForest(
x = train_bin_nf[, predictors],
y = train_bin_nf$ECIG_BINARY,
ntree = 1000,          # number of trees
mtry = 2,              # number of variables per split (can tune)
nodesize = 4,          # minimum size of terminal nodes
importance = TRUE      # importance of predictors is assessed
)
cd ~
# Convert outcome to factor for classification
train_bin_nf$ECIG_BINARY <- factor(ifelse(train_bin_nf$ECIG_COMP == 1 | train_bin_nf$ECIG_COMP == 2, 1, 0))
# The select() function is used by dplyr to deselect columns specified by their locations (indices) in the data frame. c() combines selections and
brfss_2017_cleaned <- brfss_2017 %>%
dplyr::select(-c(2:6), -c(10:27), -31, -37, -40, -45, -c(53:57), -c(62:64), -72, -c(80:82), -85, -c(87:89), -c(97:102), -106, -108, -110, -c(112:246), ... = -c(255:258), -c(326:327), -c(330:337), -c(340:345), -c(356:357))
library(haven) # data formatting
library(dplyr) # data transformation
library(mice) # imputation
library(tidyverse) # set of packages for tidying data
library(corrplot) # for correlelogram
library(caret) # classification and regression training
library(parameters) # processing statistical model parameters
library(see) # passes objects from parameters package
library(lmtest)  # assumption testing
library(ggplot2) # visualizations
library(car)  # variance inflation factor (VIF)
library(ordinalNet) # ordinal logistic regression
library(plyr) # set of tools for splitting up data
library(smotefamily) # generates synthetic samples to address class imbalance
library(MASS) # supports functions from Venables and Ripley, "Modern Applied Statistics with S" (4th edition, 2002)
library(MLmetrics) # model evaluation metrics
library(ipred) # improve predictive models
library(rpart) # recursive partitioning and regression trees
library(pROC) # analyze ROC curves
library(randomForest) # classification and regression based on Breiman (2001) <doi:10.1023/A:1010933404324>
library(mice) # multiple imputations for multivariate missing data
library(tidyr) # tidy messy data
library(PRROC) # precision recall and ROC curves
brfss_2017 <- read_xpt("LLCP2017.XPT") #Reading in 2017 Behaviroal Risk Factor Surveillance System file from an export file
head(brfss_2017) #Viewing first six rows of dataset for data preview
# Binary Variable Creation
df_nf <- brfss_2017_cleaned
library(haven) # data formatting
library(dplyr) # data transformation
library(mice) # imputation
library(tidyverse) # set of packages for tidying data
library(corrplot) # for correlelogram
library(caret) # classification and regression training
library(parameters) # processing statistical model parameters
library(see) # passes objects from parameters package
library(lmtest)  # assumption testing
library(ggplot2) # visualizations
library(car)  # variance inflation factor (VIF)
library(ordinalNet) # ordinal logistic regression
library(plyr) # set of tools for splitting up data
library(smotefamily) # generates synthetic samples to address class imbalance
library(MASS) # supports functions from Venables and Ripley, "Modern Applied Statistics with S" (4th edition, 2002)
library(MLmetrics) # model evaluation metrics
library(ipred) # improve predictive models
library(rpart) # recursive partitioning and regression trees
library(pROC) # analyze ROC curves
library(randomForest) # classification and regression based on Breiman (2001) <doi:10.1023/A:1010933404324>
library(mice) # multiple imputations for multivariate missing data
library(tidyr) # tidy messy data
library(PRROC) # precision recall and ROC curves
brfss_2017 <- read_xpt("LLCP2017.XPT") #Reading in 2017 Behaviroal Risk Factor Surveillance System file from an export file
head(brfss_2017) #Viewing first six rows of dataset for data preview
# The select() function is used by dplyr to deselect columns specified by their locations (indices) in the data frame. c() combines selections and
brfss_2017_cleaned <- brfss_2017 %>%
dplyr::select(-c(2:6), -c(10:27), -31, -37, -40, -45, -c(53:57), -c(62:64), -72, -c(80:82), -85, -c(87:89), -c(97:102), -106, -108, -110, -c(112:246), ... = -c(255:258), -c(326:327), -c(330:337), -c(340:345), -c(356:357))
# Check that select() removed columns successfully
head(brfss_2017_cleaned)
# Names() takes in variable indices and specified new variable names
names(brfss_2017_cleaned)[1] <- "STATE"
names(brfss_2017_cleaned)[4] <- "PSU"
names(brfss_2017_cleaned)[8] <- "HLTHPLN"
names(brfss_2017_cleaned)[9] <- "PERSDOC"
names(brfss_2017_cleaned)[11] <- "CHECKUP"
names(brfss_2017_cleaned)[12] <- "BPHIGH"
names(brfss_2017_cleaned)[13] <- "CHOLCHK"
names(brfss_2017_cleaned)[14] <- "TOLDHI"
names(brfss_2017_cleaned)[15] <- "CVDINFR"
names(brfss_2017_cleaned)[16] <- "CVDCRHD"
names(brfss_2017_cleaned)[17] <- "CVDSTRK"
names(brfss_2017_cleaned)[18] <- "ASTHMA"
names(brfss_2017_cleaned)[21] <- "CHCCOPD"
names(brfss_2017_cleaned)[22] <- "HAVARTH"
names(brfss_2017_cleaned)[23] <- "ADDEPEV"
names(brfss_2017_cleaned)[25] <- "DIABETES"
names(brfss_2017_cleaned)[29] <- "RENTHOME"
names(brfss_2017_cleaned)[30] <- "VETERAN"
names(brfss_2017_cleaned)[31] <- "EMPLOYED"
names(brfss_2017_cleaned)[33] <- "INCOME"
names(brfss_2017_cleaned)[35] <- "WEIGHT"
names(brfss_2017_cleaned)[36] <- "HEIGHT"
names(brfss_2017_cleaned)[44] <- "USENOW"
names(brfss_2017_cleaned)[47] <- "FRUIT"
names(brfss_2017_cleaned)[48] <- "FRUIT_JUICE"
names(brfss_2017_cleaned)[49] <- "GREEN_VEG"
names(brfss_2017_cleaned)[50] <- "FRENCHF"
names(brfss_2017_cleaned)[51] <- "POTATO"
names(brfss_2017_cleaned)[52] <- "OTHER_VEG"
names(brfss_2017_cleaned)[53] <- "EXERCISE_ANY"
names(brfss_2017_cleaned)[56] <- "FLUSHOT"
names(brfss_2017_cleaned)[57] <- "PNEUMONIA_VAC"
names(brfss_2017_cleaned)[58] <- "HIVTEST"
names(brfss_2017_cleaned)[59] <- "HIVRISK"
names(brfss_2017_cleaned)[63] <- "STSTR"
names(brfss_2017_cleaned)[64] <- "STRATUM_WGHT"
names(brfss_2017_cleaned)[65] <- "RAWRAKE"
names(brfss_2017_cleaned)[66] <- "WT2RAKE"
names(brfss_2017_cleaned)[67] <- "IMPRACE"
names(brfss_2017_cleaned)[68] <- "DUALUSE"
names(brfss_2017_cleaned)[69] <- "DUALCOR"
names(brfss_2017_cleaned)[70] <- "LLCPWT2"
names(brfss_2017_cleaned)[71] <- "LLCPWT"
names(brfss_2017_cleaned)[72] <- "RFHLTH"
names(brfss_2017_cleaned)[73] <- "PHYS_COMP"
names(brfss_2017_cleaned)[74] <- "MENT_COMP"
names(brfss_2017_cleaned)[75] <- "HCVU651"
names(brfss_2017_cleaned)[76] <- "RFHYPES"
names(brfss_2017_cleaned)[77] <- "CHOLCH1"
names(brfss_2017_cleaned)[78] <- "HICHOL_COMP"
names(brfss_2017_cleaned)[79] <- "MI_CHD"
names(brfss_2017_cleaned)[80] <- "ASTHMA_LIFE"
names(brfss_2017_cleaned)[81] <- "ASTHMA_NOW_COMP"
names(brfss_2017_cleaned)[82] <- "ASTHMA_COMP"
names(brfss_2017_cleaned)[83] <- "ARTHRITIS_DIAGNOS"
names(brfss_2017_cleaned)[84] <- "LIMIT_ACTIVITY"
names(brfss_2017_cleaned)[85] <- "LIMIT_WORK"
names(brfss_2017_cleaned)[86] <- "LIMIT_SOCIAL"
names(brfss_2017_cleaned)[87] <- "PRACE_COMP"
names(brfss_2017_cleaned)[88] <- "MULTI_RACE"
names(brfss_2017_cleaned)[89] <- "HISPANIC_COMP"
names(brfss_2017_cleaned)[90] <- "RACE_COMP"
names(brfss_2017_cleaned)[91] <- "RACEG21"
names(brfss_2017_cleaned)[92] <- "RACEGR3"
names(brfss_2017_cleaned)[93] <- "RACE_G1"
names(brfss_2017_cleaned)[94] <- "AGEG5YR"
names(brfss_2017_cleaned)[95] <- "AGE65YR"
names(brfss_2017_cleaned)[96] <- "AGE80"
names(brfss_2017_cleaned)[97] <- "AGE_G"
names(brfss_2017_cleaned)[98] <- "HT_COMP_IN"
names(brfss_2017_cleaned)[99] <- "HT_COMP_M"
names(brfss_2017_cleaned)[100] <- "WT_COMP_KILO"
names(brfss_2017_cleaned)[101] <- "BMI"
names(brfss_2017_cleaned)[102] <- "BMI_CAT"
names(brfss_2017_cleaned)[103] <- "BMI_OVER"
names(brfss_2017_cleaned)[104] <- "CHILD_COMP"
names(brfss_2017_cleaned)[105] <- "EDUCA_COMP"
names(brfss_2017_cleaned)[106] <- "INCOME_COMP"
names(brfss_2017_cleaned)[107] <- "SMOKER_COMP"
names(brfss_2017_cleaned)[108] <- "SMOKENOW_COMP"
names(brfss_2017_cleaned)[109] <- "ECIG_COMP"
names(brfss_2017_cleaned)[110] <- "ECIG_NOW_COMP"
names(brfss_2017_cleaned)[111] <- "DRINKANY_30"
names(brfss_2017_cleaned)[112] <- "DROCDY3"
names(brfss_2017_cleaned)[113] <- "BINGE_COMP"
names(brfss_2017_cleaned)[114] <- "WEEKLY_DRINK"
names(brfss_2017_cleaned)[115] <- "HEAVY_DRINK"
names(brfss_2017_cleaned)[116] <- "FRUITJUICE_COMP"
names(brfss_2017_cleaned)[117] <- "FRUITJUICE_COMP2"
names(brfss_2017_cleaned)[118] <- "GREEN_VEG_COMP"
names(brfss_2017_cleaned)[119] <- "FRENCHF_COMP"
names(brfss_2017_cleaned)[120] <- "POTATO_COMP"
names(brfss_2017_cleaned)[121] <- "OTHER_VEG_COMP"
names(brfss_2017_cleaned)[122] <- "MISSING_FRUIT"
names(brfss_2017_cleaned)[123] <- "MISSING_VEG"
names(brfss_2017_cleaned)[124] <- "MISS_ANY_FRUIT"
names(brfss_2017_cleaned)[125] <- "MISS_ANY_VEG"
names(brfss_2017_cleaned)[126] <- "TOTAL_FRUIT"
names(brfss_2017_cleaned)[127] <- "TOTAL_VEG"
names(brfss_2017_cleaned)[128] <- "ATLEAST1_FRUIT"
names(brfss_2017_cleaned)[129] <- "ATLEAST1_VEG"
names(brfss_2017_cleaned)[130] <- "MORE16_FRUIT"
names(brfss_2017_cleaned)[131] <- "MORE23_VEG"
names(brfss_2017_cleaned)[132] <- "FRUIT_EXCLUDE"
names(brfss_2017_cleaned)[133] <- "VEG_EXCLUDE"
names(brfss_2017_cleaned)[134] <- "LEISURE_COMP"
names(brfss_2017_cleaned)[135] <- "MAX_OXYGEN"
names(brfss_2017_cleaned)[136] <- "FUNC_CAPACITY"
names(brfss_2017_cleaned)[137] <- "STRENGTH_FREQ"
names(brfss_2017_cleaned)[138] <- "MISSING_PHYS"
names(brfss_2017_cleaned)[139] <- "PHYS_CATEGORY"
names(brfss_2017_cleaned)[140] <- "PHYS_IDX"
names(brfss_2017_cleaned)[141] <- "150_PHYS_COMP"
names(brfss_2017_cleaned)[142] <- "300_PHYS_COMP"
names(brfss_2017_cleaned)[143] <- "300_PHYS2_COMP"
names(brfss_2017_cleaned)[144] <- "MUSCLE_RECOMMEND"
names(brfss_2017_cleaned)[145] <- "AEROBIC_STRENGTH"
names(brfss_2017_cleaned)[146] <- "AEROBIC_STRENGTH2"
names(brfss_2017_cleaned)[147] <- "SEATBELT_COMP"
names(brfss_2017_cleaned)[148] <- "SEATBELT_COMP2"
names(brfss_2017_cleaned)[149] <- "AIDSTEST_COMP"
# Check that names() renamed columns successfully
head(brfss_2017_cleaned)
# Removal of additional calculated and irrelevant variables
brfss_2017_cleaned <- brfss_2017_cleaned %>%
dplyr::select(-c(35, 36, 43, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149))
# Computed categories given a value of 9 contain NAs and are removed
brfss_2017_cleaned$ECIG_COMP[brfss_2017_cleaned$ECIG_COMP == 9] <- NA
brfss_2017_cleaned$SMOKER_COMP[brfss_2017_cleaned$SMOKER_COMP == 9] <- NA
# Remove SEQNO since it's a unique identifier
brfss_2017_cleaned <- brfss_2017_cleaned %>%
dplyr::select(-c(SEQNO))
# Filter for only asthmatics
#brfss_2017_cleaned <- brfss_2017_cleaned %>%
# filter(ASTHMA == 1)
# Ensure unique column names
colnames(brfss_2017_cleaned) <- make.names(colnames(brfss_2017_cleaned), unique = TRUE)
# Correlation for all variables
round(cor(brfss_2017_cleaned), digits = 2)
# Create model for VIF
vif_model <- lm(ECIG_COMP ~ AGE80 + BMI + SMOKER_COMP + STATE + ADDEPEV + ALCDAY5 + CHCCOPD + CHECKUP + EDUCA + GENHLTH + HLTHPLN + INCOME + SEX, data = brfss_2017_cleaned)
# Calculating VIF
vif_values <- vif(vif_model)
vif_values
# Visualizing the model
plot(vif_model, which = 1, main = "Model Fit")
# Visualizing VIF
barplot(vif_values, las = 2, col = "skyblue", main = "Variance Inflation Factor (VIF)")
# Creating a correlation matrix
cor_matrix <- cor(brfss_2017_cleaned[c('AGE80', 'BMI', 'SMOKER_COMP', 'STATE', 'ADDEPEV', 'ALCDAY5',
'CHCCOPD', 'CHECKUP', 'EDUCA', 'GENHLTH', 'HLTHPLN', 'INCOME', 'SEX')])
# Visualizing the correlation matrix
image(cor_matrix, main = "Correlation Matrix", col = colorRampPalette(c("blue", "white", "red"))(20))
# Visualizing E-cigarette smoking status and conventional smoking status
EDA_1 <- ggplot(brfss_2017_cleaned, aes(x = as.factor(ECIG_COMP),
y = prop.table(stat(count)),
fill = as.factor(ECIG_COMP),
label = scales::percent(prop.table(stat(count))))) +
geom_bar(position = "dodge") +
geom_text(stat = 'count',
position = position_dodge(.10),
vjust = -0.5,
size = 4) +
scale_y_continuous(labels = scales::percent) +
scale_x_discrete(labels = c('Every day', 'Some days', "Former Smoker", "Never smoked")) +
labs(title = "E-Cigarette Usage Among All Adults Surveyed in 2017", x = "E-Cigarette Usage", y = "Surveyed Population %", fill = "E-Cigarette Usage")
EDA_1
# Visualizing Conventional Smoking Status
EDA_2 <- ggplot(brfss_2017_cleaned, aes(x = as.factor(SMOKER_COMP),
y = prop.table(stat(count)),
fill = as.factor(SMOKER_COMP),
label = scales::percent(prop.table(stat(count))))) +
geom_bar(position = "dodge") +
geom_text(stat = 'count',
position = position_dodge(.10),
vjust = -0.5,
size = 4) +
scale_y_continuous(labels = scales::percent) +
scale_x_discrete(labels = c('Every day', 'Some days', "Former Smoker", "Never smoked")) +
labs(title = "Conventional Smoking Among All Adults Surveyed in 2017", x = "Smoking Status", y = "Surveyed Population %", fill = "Smoking Status")
EDA_2
#Visualizing Asthma Status
EDA_3 <- ggplot(brfss_2017_cleaned, aes(x = as.factor(ASTHMA),
y = prop.table(stat(count)),
fill = as.factor(ASTHMA),
label = scales::percent(prop.table(stat(count))))) +
geom_bar(position = "dodge") +
geom_text(stat = 'count',
position = position_dodge(.10),
vjust = -0.5,
size = 4) +
scale_y_continuous(labels = scales::percent) +
scale_x_discrete(labels = c('Yes', 'No', "Unsure", "Refused")) +
labs(title = "Asthma Diagnosis Among All Adults Surveyed in 2017", x = "Asthma Diagnosis", y = "Surveyed Population %", fill = "Diagnosis")
EDA_3
#Visualizing Asthma Status
EDA_3 <- ggplot(brfss_2017_cleaned, aes(x = as.factor(ASTHMA),
y = prop.table(stat(count)),
fill = as.factor(ASTHMA),
label = scales::percent(prop.table(stat(count))))) +
geom_bar(position = "dodge") +
geom_text(stat = 'count',
position = position_dodge(.10),
vjust = -0.5,
size = 4) +
scale_y_continuous(labels = scales::percent) +
scale_x_discrete(labels = c('Yes', 'No', "Unsure", "Refused")) +
labs(title = "Asthma Diagnosis Among All Adults Surveyed in 2017", x = "Asthma Diagnosis", y = "Surveyed Population %", fill = "Diagnosis")
EDA_3
# Visualizing Asthma and Vaping Status
EDA_4 <- ggplot(brfss_2017_cleaned, aes(x = as.factor(ECIG_COMP),
y = prop.table(stat(count)),
fill = as.factor(ASTHMA))) +
geom_bar(position = "dodge") +
scale_y_continuous(labels = scales::percent) +
scale_x_discrete(labels = c('Every day', 'Some days', "Former User", "Never Used")) +
labs(title = "E-Cigarette Usage Among Asthmatics in 2017", x = "E-Cigarette Usage", y = "Surveyed Population %", fill = "Asthma Diagnosis")
EDA_4
# Visualizing Conventional Smoking and Vaping Status
EDA_5 <- ggplot(brfss_2017_cleaned, aes(x = as.factor(ECIG_COMP),
y = prop.table(stat(count)),
fill = as.factor(SMOKER_COMP))) +
geom_bar(position = "dodge") +
scale_y_continuous(labels = scales::percent) +
scale_x_discrete(labels = c('Every day', 'Some days', "Former User", "Never Used")) +
labs(title = "E-Cigarette Usage Among Conventional Smokers in 2017", x = "E-Cigarette Usage", y = "Surveyed Population %", fill = "Smoking Status")
EDA_5
# Visualizing Conventional Smoking Status
EDA_6 <- ggplot(brfss_2017_cleaned, aes(x = as.factor(SMOKER_COMP),
y = prop.table(stat(count)),
fill = as.factor(ASTHMA))) +
geom_bar(position = "dodge") +
scale_y_continuous(labels = scales::percent) +
scale_x_discrete(labels = c('Every day', 'Some days', "Former Smoker", "Never smoked")) +
labs(title = "Conventional Smoking Among Asthmatics in 2017", x = "Smoking Status", y = "Surveyed Population %", fill = "Asthma Status")
EDA_6
# Binary Variable Creation
df <- brfss_2017_cleaned
# Filter on adult asthmatics with history of vaping
df <- brfss_2017_cleaned %>%
filter(
ECIG_COMP != 4,
ASTHMA == 1
)
# factoring target variable and ensuring data compatibility
df$ECIG_BINARY <- ifelse(df$ECIG_COMP == 1 | df$ECIG_COMP == 2, 1, 0)
df$ECIG_COMP <- as.factor(df$ECIG_COMP)
df$ECIG_BINARY <- as.factor(df$ECIG_BINARY)
df$STATE <- as.numeric(as.character(df$STATE))
#train-test split with 1 partition, 70% of data in training, and results not stored in list
set.seed(1)
split_bin <- createDataPartition(df$ECIG_BINARY, times = 1, p = .7, list = FALSE)
train_bin <- df[split_bin, ]
test_bin <- df[-split_bin, ]
# Binary Variable Creation
df_2 <- brfss_2017_cleaned
# Filter on adult asthmatics with history of vaping and smoking
df_2 <- brfss_2017_cleaned %>%
filter(
ECIG_COMP != 4,
ASTHMA == 1,
SMOKER_COMP != 4
)
# factoring target variable and ensuring data compatibility
df_2$ECIG_BINARY <- ifelse(df_2$ECIG_COMP == 1 | df_2$ECIG_COMP == 2, 1, 0)
df_2$ECIG_COMP <- as.factor(df_2$ECIG_COMP)
df_2$ECIG_BINARY <- as.factor(df_2$ECIG_BINARY)
df_2$STATE <- as.numeric(as.character(df_2$STATE))
#train-test split with 1 partition, 70% of data in training, and results not stored in list
set.seed(2)
split_bin_2 <- createDataPartition(df_2$ECIG_BINARY, times = 1, p = .7, list = FALSE)
train_bin_2 <- df_2[split_bin_2, ]
test_bin_2 <- df_2[-split_bin_2, ]
# Binary Variable Creation
df_nf <- brfss_2017_cleaned
# Filter on adult asthmatics
df_nf <- brfss_2017_cleaned %>%
filter(ASTHMA == 1)
# factoring target variable and ensuring data compatibility
df_nf$ECIG_BINARY <- ifelse(df_nf$ECIG_COMP == 1 | df_nf$ECIG_COMP == 2, 1, 0)
df_nf$ECIG_COMP <- as.factor(df_nf$ECIG_COMP)
df_nf$ECIG_BINARY <- as.factor(df_nf$ECIG_BINARY)
df_nf$STATE <- as.numeric(as.character(df_nf$STATE))
#train-test split with 1 partition, 70% of data in training, and results not stored in list
set.seed(3)
split_bin_nf <- createDataPartition(df_nf$ECIG_BINARY, times = 1, p = .7, list = FALSE)
train_bin_nf <- df_nf[split_bin_nf, ]
test_bin_nf <- df_nf[-split_bin_nf, ]
# View available methods within mice()
methods(mice)
# Calculate imputed values with mice() using cart with 1 multiple imputation and 1 iteration. Reproducible.
imp_bin_nf <- mice(train_bin_nf, method = "cart", m = 1, maxit = 1, seed = 6)
# Complete training data with imputed values
train_bin_nf <- complete(imp_bin_nf)
preprocessed_data <- preProcess(train_bin[, c("ASTHMA", 'AGE80', 'BMI', 'SMOKER_COMP', 'STATE', 'ADDEPEV', 'ALCDAY5',
'CHCCOPD', 'CHECKUP', 'EDUCA', 'GENHLTH', 'HLTHPLN', 'INCOME', 'SEX')], method = "range")
transformed_data <- predict(preprocessed_data, train_bin)
# checks for numeric values
numerical_data <- transformed_data %>%
select(where(is.numeric)) %>%
select(where(~ var(.x, na.rm = TRUE) != 0))
# View available methods within mice()
methods(mice)
# Calculate imputed values with mice() using cart with 1 multiple imputation and 1 iteration. Reproducible.
imp_bin <- mice(train_bin, method = "cart", m = 1, maxit = 1, seed = 4)
# Complete training data with imputed values
train_bin <- complete(imp_bin)
# View available methods within mice()
methods(mice)
# Calculate imputed values with mice() using cart with 1 multiple imputation and 1 iteration. Reproducible.
imp_bin_2 <- mice(train_bin_2, method = "cart", m = 1, maxit = 1, seed = 5)
# Complete training data with imputed values
train_bin_2 <- complete(imp_bin_2)
preprocessed_data <- preProcess(train_bin[, c("ASTHMA", 'AGE80', 'BMI', 'SMOKER_COMP', 'STATE', 'ADDEPEV', 'ALCDAY5',
'CHCCOPD', 'CHECKUP', 'EDUCA', 'GENHLTH', 'HLTHPLN', 'INCOME', 'SEX')], method = "range")
transformed_data <- predict(preprocessed_data, train_bin)
# checks for numeric values
numerical_data <- transformed_data %>%
select(where(is.numeric)) %>%
select(where(~ var(.x, na.rm = TRUE) != 0))
preprocessed_data <- preProcess(train_bin[, c("ASTHMA", 'AGE80', 'BMI', 'SMOKER_COMP', 'STATE', 'ADDEPEV', 'ALCDAY5',
'CHCCOPD', 'CHECKUP', 'EDUCA', 'GENHLTH', 'HLTHPLN', 'INCOME', 'SEX')], method = "range")
transformed_data <- predict(preprocessed_data, train_bin)
# checks for numeric values
numerical_data <- transformed_data %>%
select(where(is.numeric)) %>%
select(where(~ var(.x, na.rm = TRUE) != 0))
preprocessed_data <- preProcess(train_bin[, c('AGE80', 'BMI', 'SMOKER_COMP', 'STATE', 'ADDEPEV', 'ALCDAY5',
'CHCCOPD', 'CHECKUP', 'EDUCA', 'GENHLTH', 'HLTHPLN', 'INCOME', 'SEX')], method = "range")
transformed_data <- predict(preprocessed_data, train_bin)
# checks for numeric values
numerical_data <- transformed_data %>%
select(where(is.numeric)) %>%
select(where(~ var(.x, na.rm = TRUE) != 0))
preprocessed_data <- preProcess(train_bin[, c('AGE80', 'BMI', 'SMOKER_COMP', 'STATE', 'ADDEPEV', 'ALCDAY5',
'CHCCOPD', 'CHECKUP', 'EDUCA', 'GENHLTH', 'HLTHPLN', 'INCOME', 'SEX')], method = "range")
transformed_data <- predict(preprocessed_data, train_bin)
# checks for numeric values
numerical_data <- transformed_data %>%
select(where(is.numeric)) %>%
#select(where(~ var(.x, na.rm = TRUE) != 0))
numerical_data <- numerical_data %>%
filter_all(all_vars(is.finite(.))) %>%
na.omit()
preprocessed_data <- preProcess(train_bin[, c('AGE80', 'BMI', 'SMOKER_COMP', 'STATE', 'ADDEPEV', 'ALCDAY5',
'CHCCOPD', 'CHECKUP', 'EDUCA', 'GENHLTH', 'HLTHPLN', 'INCOME', 'SEX')], method = "range")
transformed_data <- predict(preprocessed_data, train_bin)
# checks for numeric values
numerical_data <- transformed_data %>%
select(where(is.numeric)) %>%
select(where(~ var(.x, na.rm = TRUE) != 0))
preprocessed_data_2 <- preProcess(train_bin_2[, c("ASTHMA", 'AGE80', 'BMI', 'SMOKER_COMP', 'STATE', 'ADDEPEV', 'ALCDAY5',
'CHCCOPD', 'CHECKUP', 'EDUCA', 'GENHLTH', 'HLTHPLN', 'INCOME', 'SEX')], method = "range")
transformed_data_2 <- predict(preprocessed_data_2, train_bin_2)
# checks for numeric values
numerical_data_2 <- transformed_data_2 %>%
select(where(is.numeric)) %>%
select(where(~ var(.x, na.rm = TRUE) != 0))
# Binary Variable Creation
df <- brfss_2017_cleaned
# Filter on adult asthmatics with history of vaping
df <- brfss_2017_cleaned %>%
filter(
ECIG_COMP != 4,
ASTHMA == 1
)
# factoring target variable and ensuring data compatibility
df$ECIG_BINARY <- ifelse(df$ECIG_COMP == 1 | df$ECIG_COMP == 2, 1, 0)
df$ECIG_COMP <- as.factor(df$ECIG_COMP)
df$ECIG_BINARY <- as.factor(df$ECIG_BINARY)
df$STATE <- as.numeric(as.character(df$STATE))
#train-test split with 1 partition, 70% of data in training, and results not stored in list
set.seed(1)
split_bin <- createDataPartition(df$ECIG_BINARY, times = 1, p = .7, list = FALSE)
train_bin <- df[split_bin, ]
test_bin <- df[-split_bin, ]
# Binary Variable Creation
df_2 <- brfss_2017_cleaned
# Filter on adult asthmatics with history of vaping and smoking
df_2 <- brfss_2017_cleaned %>%
filter(
ECIG_COMP != 4,
ASTHMA == 1,
SMOKER_COMP != 4
)
# factoring target variable and ensuring data compatibility
df_2$ECIG_BINARY <- ifelse(df_2$ECIG_COMP == 1 | df_2$ECIG_COMP == 2, 1, 0)
df_2$ECIG_COMP <- as.factor(df_2$ECIG_COMP)
df_2$ECIG_BINARY <- as.factor(df_2$ECIG_BINARY)
df_2$STATE <- as.numeric(as.character(df_2$STATE))
#train-test split with 1 partition, 70% of data in training, and results not stored in list
set.seed(2)
split_bin_2 <- createDataPartition(df_2$ECIG_BINARY, times = 1, p = .7, list = FALSE)
train_bin_2 <- df_2[split_bin_2, ]
test_bin_2 <- df_2[-split_bin_2, ]
# Binary Variable Creation
df_nf <- brfss_2017_cleaned
# Filter on adult asthmatics
df_nf <- brfss_2017_cleaned %>%
filter(ASTHMA == 1)
# factoring target variable and ensuring data compatibility
df_nf$ECIG_BINARY <- ifelse(df_nf$ECIG_COMP == 1 | df_nf$ECIG_COMP == 2, 1, 0)
df_nf$ECIG_COMP <- as.factor(df_nf$ECIG_COMP)
df_nf$ECIG_BINARY <- as.factor(df_nf$ECIG_BINARY)
df_nf$STATE <- as.numeric(as.character(df_nf$STATE))
#train-test split with 1 partition, 70% of data in training, and results not stored in list
set.seed(3)
split_bin_nf <- createDataPartition(df_nf$ECIG_BINARY, times = 1, p = .7, list = FALSE)
train_bin_nf <- df_nf[split_bin_nf, ]
test_bin_nf <- df_nf[-split_bin_nf, ]
# View available methods within mice()
methods(mice)
# Calculate imputed values with mice() using cart with 1 multiple imputation and 1 iteration. Reproducible.
imp_bin <- mice(train_bin, method = "cart", m = 1, maxit = 1, seed = 4)
# Complete training data with imputed values
train_bin <- complete(imp_bin)
preprocessed_data <- preProcess(train_bin[, c('AGE80', 'BMI', 'SMOKER_COMP', 'STATE', 'ADDEPEV', 'ALCDAY5',
'CHCCOPD', 'CHECKUP', 'EDUCA', 'GENHLTH', 'HLTHPLN', 'INCOME', 'SEX')], method = "range")
transformed_data <- predict(preprocessed_data, train_bin)
# checks for numeric values
numerical_data <- transformed_data %>%
select(where(is.numeric)) %>%
select(where(~ var(.x, na.rm = TRUE) != 0))
