results <- data.frame(degree = 1:25, rmse = 0)
for (degree in 1:25){
predictions <- predict(models[[degree]], newdata = data.frame(x = x))
results[results$degree == degree, "rmse"] <-
sqrt((1/length(predictions)) * sum((predictions - f)^2))
}
ggplot() +
geom_line(data = results, aes(x = degree, y = rmse), color = "black")
model <- lm(observations ~ poly(x, ?))
# Load necessary libraries
library(dplyer)
install.packages(c("dplyr", "cluster", "factoextra"))
# Load necessary libraries
library(dplyer)
# Load necessary libraries
library(dplyr)
library(cluster)
library(factoextra)
# Load the dataset (replace with your file path)
data <- read.csv("C:\\Users\\rickm\\Merrimack\\DSE5004 - Visual Data Exploration\\Assignments\\Segmentation & Profiling\\Data\\Customer_Dataset_Data.csv")
# Select relevant colmuns for clustering
selected_columns <- c("Age", "Gender", "Education.years", "Streaming.hours",
"Owns.smart.device", "Video.streaming.add.on",
"Smart.home.devices", "Owns.gaming.console", "Annual.Household.income")
segmentation_data <- data %>%
select(all_of(selected_columns))
# Convert categorical variables to numeric (e.g., Gender, Owns.smart.device)
segmentation_data$Gender <- ifelse(segmentation_data$Gender == "Male", 1, 0)
segmentation_data$Owns.smart.device <- ifelse(segmentation_data$Owns.smart.device == "Yes", 1, 0)
segmentation_data$Video.streaming.add.on <- ifelse(segmentation_data$Video.streaming.add.on == "Yes", 1, 0)
segmentation_data$Smart.home.devices <- ifelse(segmentation_data$Smart.home.devices == "Yes", 1, 0)
segmentation_data$Owns.gaming.console <- ifelse(segmentation_data$Owns.gaming.console == "Yes", 1, 0)
# Scale numeric variables
segmentation_data_scaled <- scale(segmentation_data[, -which(names(segmentation_data) == "Annual.Household.income")])
# Apply K-means clustering
set.seed(123)
kmeans_result <- kmeans(segmentation_data_scaled, centers = 4)
# Add cluster labels to the dataset
segmentation_data$KMeans_Cluster <- kmeans_result$cluster
# Visualize K-means clustering results
fviz_cluster(kmeans_result, data = segmentation_data_scaled, geom = "point", ellipse = TRUE) +
labs(title = "K-means Clustering Results")
# Compute distance matrix
dist_matrix <- dist(segmentation_data_scaled, method = "euclidean")
# Apply hierarchical clustering
hierarchical_result <- hclust(dist_matrix, method = "ward.D2")
# Cut the tree into 4 clusters
segmentation_data$Hierarchical_Cluster <- cutree(hierarchical_result, k = 4)
# Visualize dendrogram
plot(hierarchical_result, main = "Dendrogram for Hierarchical Clustering", xlab = "", sub = "", cex = 0.6)
# Highlight clusters in dendrogram
rect.hclust(hierarchical_result, k = 4, border = 2:5)
# Summarize cluster profiles
kmeans_profile <- segmentation_data %>%
group_by(KMeans_Cluster) %>%
summarise(
Avg_Age = mean(Age, na.rm = TRUE),
Avg_Streaming_Hours = mean(Streaming.hours, na.rm = TRUE),
Avg_Income = mean(as.numeric(gsub("[$,]", "", Annual.Household.income)), na.rm = TRUE),
Smart_Device_Adoption = mean(Owns.smart.device, na.rm = TRUE),
Streaming_Addon_Adoption = mean(Video.streaming.add.on, na.rm = TRUE)
)
print(kmeans_profile)
View(data)
# Apply K-means clustering
set.seed(123)
kmeans_result <- kmeans(segmentation_data_scaled, centers = 10)
# Add cluster labels to the dataset
segmentation_data$KMeans_Cluster <- kmeans_result$cluster
# Visualize K-means clustering results
fviz_cluster(kmeans_result, data = segmentation_data_scaled, geom = "point", ellipse = TRUE) +
labs(title = "K-means Clustering Results")
# Apply K-means clustering
set.seed(123)
kmeans_result <- kmeans(segmentation_data_scaled, centers = 10)
# Add cluster labels to the dataset
segmentation_data$KMeans_Cluster <- kmeans_result$cluster
# Visualize K-means clustering results
fviz_cluster(kmeans_result, data = segmentation_data_scaled, geom = "point", ellipse = TRUE) +
labs(title = "K-means Clustering Results")
write.csv(data, "Customer_Data_With_Clusters.csv", row.names = FALSE)
# Load necessary libraries
library(dplyr)
library(cluster)
library(factoextra)
# Load the dataset (replace with your file path)
data <- read.csv("C:\\Users\\rickm\\Merrimack\\DSE5004 - Visual Data Exploration\\Assignments\\Segmentation & Profiling\\Data\\Customer_Dataset_Data.csv")
# Select relevant colmuns for clustering
selected_columns <- c("Age", "Gender", "Education.years", "Streaming.hours",
"Owns.smart.device", "Video.streaming.add.on",
"Smart.home.devices", "Owns.gaming.console", "Annual.Household.income")
segmentation_data <- data %>%
select(all_of(selected_columns))
# Convert categorical variables to numeric (e.g., Gender, Owns.smart.device)
segmentation_data$Gender <- ifelse(segmentation_data$Gender == "Male", 1, 0)
segmentation_data$Owns.smart.device <- ifelse(segmentation_data$Owns.smart.device == "Yes", 1, 0)
segmentation_data$Video.streaming.add.on <- ifelse(segmentation_data$Video.streaming.add.on == "Yes", 1, 0)
segmentation_data$Smart.home.devices <- ifelse(segmentation_data$Smart.home.devices == "Yes", 1, 0)
segmentation_data$Owns.gaming.console <- ifelse(segmentation_data$Owns.gaming.console == "Yes", 1, 0)
# Scale numeric variables
segmentation_data_scaled <- scale(segmentation_data[, -which(names(segmentation_data) == "Annual.Household.income")])
# Apply K-means clustering
set.seed(123)
kmeans_result <- kmeans(segmentation_data_scaled, centers = 10)
# Add cluster labels to the dataset
segmentation_data$KMeans_Cluster <- kmeans_result$cluster
# Visualize K-means clustering results
fviz_cluster(kmeans_result, data = segmentation_data_scaled, geom = "point", ellipse = TRUE) +
labs(title = "K-means Clustering Results")
#write.csv(data, "Customer_Data_With_Clusters.csv", row.names = FALSE)
# Compute distance matrix
dist_matrix <- dist(segmentation_data_scaled, method = "euclidean")
# Apply hierarchical clustering
hierarchical_result <- hclust(dist_matrix, method = "ward.D2")
# Cut the tree into 4 clusters
segmentation_data$Hierarchical_Cluster <- cutree(hierarchical_result, k = 4)
# Visualize dendrogram
plot(hierarchical_result, main = "Dendrogram for Hierarchical Clustering", xlab = "", sub = "", cex = 0.6)
# Highlight clusters in dendrogram
rect.hclust(hierarchical_result, k = 4, border = 2:5)
# Summarize cluster profiles
kmeans_profile <- segmentation_data %>%
group_by(KMeans_Cluster) %>%
summarise(
Avg_Age = mean(Age, na.rm = TRUE),
Avg_Streaming_Hours = mean(Streaming.hours, na.rm = TRUE),
Avg_Income = mean(as.numeric(gsub("[$,]", "", Annual.Household.income)), na.rm = TRUE),
Smart_Device_Adoption = mean(Owns.smart.device, na.rm = TRUE),
Streaming_Addon_Adoption = mean(Video.streaming.add.on, na.rm = TRUE)
)
print(kmeans_profile)
write.csv(data, "Customer_Data_With_Clusters.csv", row.names = FALSE)
# Example: Assuming 'Cluster_Label' column exists in your dataset
data <- data %>%
mutate(Custom_Segment = case_when(
Cluster_Label == 1 ~ "Tech-Savvy Young Adults",
Cluster_Label == 2 ~ "High-Income Families",
Cluster_Label == 3 ~ "Streaming Enthusiasts",
Cluster_Label == 4 ~ "Budget-Conscious Seniors",
Cluster_Label == 5 ~ "Frequent Streamers",
Cluster_Label == 6 ~ "Casual Gamers",
Cluster_Label == 7 ~ "Luxury Spenders",
Cluster_Label == 8 ~ "Middle-Income Suburbanites",
Cluster_Label == 9 ~ "Rural Pragmatists",
Cluster_Label == 10 ~ "Digital Minimalists",
TRUE ~ "Other"
))
colnames(data)
# Apply K-means clustering
set.seed(123)
kmeans_result <- kmeans(segmentation_data_scaled, centers = 10)
# Add cluster labels to the original dataset
data$Cluster_Label <- kmeans_result$cluster
# Add cluster labels to the dataset
segmentation_data$KMeans_Cluster <- kmeans_result$cluster
# Visualize K-means clustering results
fviz_cluster(kmeans_result, data = segmentation_data_scaled, geom = "point", ellipse = TRUE) +
labs(title = "K-means Clustering Results")
# Compute distance matrix
dist_matrix <- dist(segmentation_data_scaled, method = "euclidean")
# Apply hierarchical clustering
hierarchical_result <- hclust(dist_matrix, method = "ward.D2")
# Cut the tree into 4 clusters
data$Hierarchical_Cluster <- cutree(hierarchical_result, k = 10)
# Visualize dendrogram
plot(hierarchical_result, main = "Dendrogram for Hierarchical Clustering", xlab = "", sub = "", cex = 0.6)
# Highlight clusters in dendrogram
rect.hclust(hierarchical_result, k = 4, border = 2:5)
# Summarize cluster profiles
kmeans_profile <- segmentation_data %>%
group_by(KMeans_Cluster) %>%
summarise(
Avg_Age = mean(Age, na.rm = TRUE),
Avg_Streaming_Hours = mean(Streaming.hours, na.rm = TRUE),
Avg_Income = mean(as.numeric(gsub("[$,]", "", Annual.Household.income)), na.rm = TRUE),
Smart_Device_Adoption = mean(Owns.smart.device, na.rm = TRUE),
Streaming_Addon_Adoption = mean(Video.streaming.add.on, na.rm = TRUE)
)
print(kmeans_profile)
colnames(data)
# Example: Assuming 'Cluster_Label' column exists in your dataset
data <- data %>%
mutate(Custom_Segment = case_when(
Cluster_Label == 1 ~ "Tech-Savvy Young Adults",
Cluster_Label == 2 ~ "High-Income Families",
Cluster_Label == 3 ~ "Streaming Enthusiasts",
Cluster_Label == 4 ~ "Budget-Conscious Seniors",
Cluster_Label == 5 ~ "Frequent Streamers",
Cluster_Label == 6 ~ "Casual Gamers",
Cluster_Label == 7 ~ "Luxury Spenders",
Cluster_Label == 8 ~ "Middle-Income Suburbanites",
Cluster_Label == 9 ~ "Rural Pragmatists",
Cluster_Label == 10 ~ "Digital Minimalists",
TRUE ~ "Other"
))
head(data)
# Example: Assuming 'Cluster_Label' column exists in your dataset
data <- data %>%
mutate(Custom_Segment = case_when(
Cluster_Label == 1 ~ "Tech-Savvy Young Adults",
Cluster_Label == 2 ~ "High-Income Families",
Cluster_Label == 3 ~ "Streaming Enthusiasts",
Cluster_Label == 4 ~ "Budget-Conscious Seniors",
Cluster_Label == 5 ~ "Frequent Streamers",
Cluster_Label == 6 ~ "Casual Gamers",
Cluster_Label == 7 ~ "Luxury Spenders",
Cluster_Label == 8 ~ "Middle-Income Suburbanites",
Cluster_Label == 9 ~ "Rural Pragmatists",
Cluster_Label == 10 ~ "Digital Minimalists",
TRUE ~ "Other"
))
head(data)
# Load necessary libraries
library(dplyr)
library(cluster)
library(factoextra)
# Load the dataset (replace with your file path)
data <- read.csv("C:\\Users\\rickm\\Merrimack\\DSE5004 - Visual Data Exploration\\Assignments\\Segmentation & Profiling\\Data\\Customer_Dataset_Data.csv")
# Select relevant colmuns for clustering
selected_columns <- c("Age", "Gender", "Education.years", "Streaming.hours",
"Owns.smart.device", "Video.streaming.add.on",
"Smart.home.devices", "Owns.gaming.console", "Annual.Household.income")
segmentation_data <- data %>%
select(all_of(selected_columns))
# Convert categorical variables to numeric (e.g., Gender, Owns.smart.device)
segmentation_data$Gender <- ifelse(segmentation_data$Gender == "Male", 1, 0)
segmentation_data$Owns.smart.device <- ifelse(segmentation_data$Owns.smart.device == "Yes", 1, 0)
segmentation_data$Video.streaming.add.on <- ifelse(segmentation_data$Video.streaming.add.on == "Yes", 1, 0)
segmentation_data$Smart.home.devices <- ifelse(segmentation_data$Smart.home.devices == "Yes", 1, 0)
segmentation_data$Owns.gaming.console <- ifelse(segmentation_data$Owns.gaming.console == "Yes", 1, 0)
# Scale numeric variables
segmentation_data_scaled <- scale(segmentation_data[, -which(names(segmentation_data) == "Annual.Household.income")])
# Apply K-means clustering
set.seed(123)
kmeans_result <- kmeans(segmentation_data_scaled, centers = 10)
# Add cluster labels to the original dataset
data$Cluster_Label <- kmeans_result$cluster
# Add cluster labels to the dataset
segmentation_data$KMeans_Cluster <- kmeans_result$cluster
# Visualize K-means clustering results
fviz_cluster(kmeans_result, data = segmentation_data_scaled, geom = "point", ellipse = TRUE) +
labs(title = "K-means Clustering Results")
# Compute distance matrix
dist_matrix <- dist(segmentation_data_scaled, method = "euclidean")
# Apply hierarchical clustering
hierarchical_result <- hclust(dist_matrix, method = "ward.D2")
# Cut the tree into 4 clusters
data$Hierarchical_Cluster <- cutree(hierarchical_result, k = 10)
# Visualize dendrogram
plot(hierarchical_result, main = "Dendrogram for Hierarchical Clustering", xlab = "", sub = "", cex = 0.6)
# Highlight clusters in dendrogram
rect.hclust(hierarchical_result, k = 4, border = 2:5)
# Summarize cluster profiles
kmeans_profile <- segmentation_data %>%
group_by(KMeans_Cluster) %>%
summarise(
Avg_Age = mean(Age, na.rm = TRUE),
Avg_Streaming_Hours = mean(Streaming.hours, na.rm = TRUE),
Avg_Income = mean(as.numeric(gsub("[$,]", "", Annual.Household.income)), na.rm = TRUE),
Smart_Device_Adoption = mean(Owns.smart.device, na.rm = TRUE),
Streaming_Addon_Adoption = mean(Video.streaming.add.on, na.rm = TRUE)
)
print(kmeans_profile)
# Example: Assuming 'Cluster_Label' column exists in your dataset
data <- data %>%
mutate(Custom_Segment = case_when(
Cluster_Label == 1 ~ "Tech-Savvy Young Adults",
Cluster_Label == 2 ~ "High-Income Families",
Cluster_Label == 3 ~ "Streaming Enthusiasts",
Cluster_Label == 4 ~ "Budget-Conscious Seniors",
Cluster_Label == 5 ~ "Frequent Streamers",
Cluster_Label == 6 ~ "Casual Gamers",
Cluster_Label == 7 ~ "Luxury Spenders",
Cluster_Label == 8 ~ "Middle-Income Suburbanites",
Cluster_Label == 9 ~ "Rural Pragmatists",
Cluster_Label == 10 ~ "Digital Minimalists",
TRUE ~ "Other"
))
head(data)
write.csv(data, "Customer_Data_With_Custom_Segments.csv", row.names = FALSE)
install.packages("ggcorrplot")
# Load the package
library(ggcorrplot)
# Step 1: Select only numeric columns from your dataset
numeric_vars <- brfss_2017[, sapply(brfss_2017, is.numeric)]
library(haven)
brfss_2017 <- read_xpt("LLCP2017.XPT")
head(brfss_2017)
colnames(brfss_2017)
setwd("~/GitHub/Team-Sigma")
library(gtsummary)
library(dplyr)
brfss_2017 <- brfss_2017 %>%
filter(!is.na(`_ECIGSTS`), ASTHMA3 %in% c(1, 2), SEX %in% c(1, 2), EDUCA <= 6, INCOME2 <= 8) %>%
mutate(
VapeStatus = factor(`_ECIGSTS`,
levels = c(1, 2, 3),
labels = c("Current User", "Former User", "Never Used")),
ASTHMA3 = factor(ASTHMA3, levels = c(1, 2), labels = c("Yes", "No")),
SEX = factor(SEX, levels = c(1, 2), labels = c("Male", "Female")),
EDUCA = factor(EDUCA, levels = 1:6, labels = c(
"Never attended/kindergarten only",
"Grades 1–8",
"Grades 9–11",
"High school grad/GED",
"Some college",
"College graduate"
)),
INCOME2 = factor(INCOME2, levels = 1:8, labels = c(
"<$10k", "$10–15k", "$15–20k", "$20–25k", "$25–35k", "$35–50k", "$50–75k", ">$75k"
))
)
table1 <- brfss_2017 %>%
select(VapeStatus, ASTHMA3, SEX, EDUCA, INCOME2) %>%
tbl_summary(by = VapeStatus, missing = "ifany") %>%
add_overall() %>%
bold_labels()
table1
library(gtsummary)
library(dplyr)
brfss_2017_cont <- brfss_2017 %>%
filter(!is.na(`_ECIGSTS`), !is.na(`_AGE80`), ALCDAY5 < 777) %>%
mutate(
VapeStatus = factor(`_ECIGSTS`,
levels = c(1, 2, 3),
labels = c("Current User", "Former User", "Never Used")),
DRINK_DAYS = ifelse(ALCDAY5 >= 101 & ALCDAY5 <= 130, ALCDAY5 - 100,
ifelse(ALCDAY5 == 888, 0, NA))
)
table2 <- brfss_2017_cont %>%
select(VapeStatus, `_AGE80`, DRINK_DAYS) %>%
tbl_summary(
by = VapeStatus,
statistic = all_continuous() ~ "{mean} (± {sd})",
digits = all_continuous() ~ 1
) %>%
add_overall() %>%
bold_labels()
table2
library(dplyr)
library(ggplot2)
graph1_data <- brfss_2017 %>%
filter(`_ECIGSTS` %in% c(1, 2, 3), ASTHMA3 %in% c("Yes", "No")) %>%
mutate(
VapeStatus = factor(`_ECIGSTS`,
levels = c(1, 2, 3),
labels = c("Current User", "Former User", "Never Used"))
)
ggplot(graph1_data, aes(x = VapeStatus, fill = ASTHMA3)) +
geom_bar(position = "fill") +
scale_y_continuous(labels = scales::percent_format()) +
labs(
title = "Asthma Status by Vaping Status",
x = "Vaping Status",
y = "Proportion",
fill = "Asthma"
) +
theme_minimal()
library(dplyr)
library(ggplot2)
graph2_data <- brfss_2017 %>%
filter(`_ECIGSTS` %in% c(1, 2, 3), ALCDAY5 < 888) %>%
mutate(
VapeStatus = factor(`_ECIGSTS`,
levels = c(1, 2, 3),
labels = c("Current User", "Former User", "Never Used")),
DrinkDays = case_when(
ALCDAY5 >= 101 & ALCDAY5 <= 130 ~ ALCDAY5 - 100,
TRUE ~ NA_real_
)
) %>%
filter(!is.na(DrinkDays))
ggplot(graph2_data, aes(x = VapeStatus, y = DrinkDays, fill = VapeStatus)) +
geom_boxplot() +
labs(
title = "Alcohol Use (Days Drank in Past 30) by Vaping Status",
x = "Vaping Status",
y = "Drinking Days (Past 30)"
) +
theme_minimal() +
theme(legend.position = "none")
library(dplyr)
library(ggplot2)
graph3_data <- brfss_2017 %>%
filter(`_ECIGSTS` %in% c(1, 2, 3), !is.na(`_AGE80`)) %>%
mutate(
VapeStatus = factor(`_ECIGSTS`,
levels = c(1, 2, 3),
labels = c("Current User", "Former User", "Never Used"))
)
ggplot(graph3_data, aes(x = VapeStatus, y = `_AGE80`, fill = VapeStatus)) +
geom_boxplot() +
labs(
title = "Age Distribution by Vaping Status",
x = "Vaping Status",
y = "Age (Capped at 80+)"
) +
theme_minimal() +
theme(legend.position = "none")
library(dplyr)
library(ggplot2)
graph4_data <- brfss_2017 %>%
filter(`_ECIGSTS` %in% c(1, 2, 3)) %>%
mutate(
VapeStatus = factor(`_ECIGSTS`,
levels = c(1, 2, 3),
labels = c("Current User", "Former User", "Never Used"))
)
ggplot(graph4_data, aes(x = VapeStatus, fill = EDUCA)) +
geom_bar(position = "fill") +
scale_y_continuous(labels = scales::percent) +
labs(
title = "Education Level by Vaping Status",
x = "Vaping Status",
y = "Proportion",
fill = "Education Level"
) +
theme_minimal()
library(ggplot2)
library(dplyr)
brfss_2017 <- brfss_2017 %>%
mutate(
HealthStatus = factor(GENHLTH,
levels = c(1, 2, 3, 4, 5),
labels = c("Excellent", "Very Good", "Good", "Fair", "Poor")
)
)
ggplot(brfss_2017, aes(x = HealthStatus, fill = VapeStatus)) +
geom_bar(position = "dodge") +
labs(
title = "General Health Status by Vaping Status",
x = "Self-Reported General Health",
y = "Count",
fill = "Vaping Status"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Load the package
library(ggcorrplot)
# Step 1: Select only numeric columns from your dataset
numeric_vars <- brfss_2017[, sapply(brfss_2017, is.numeric)]
# Step 2: Remove columns with all NAs or zero variance (which can break cor())
numeric_vars <- numeric_vars[, colSums(!is.na(numeric_vars)) > 0]
numeric_vars <- numeric_vars[, apply(numeric_vars, 2, var, na.rm = TRUE) != 0]
# Step 3: Compute the correlation matrix (use pairwise complete observations to handle NAs)
cor_matrix <- cor(numeric_vars, use = "pairwise.complete.obs")
# Step 4: Plot the correlation matrix
ggcorrplot(cor_matrix,
method = "circle",
type = "lower",
lab = TRUE,
lab_size = 2.5,
title = "Correlation Matrix of Numeric Variables",
show.legend = TRUE)
# Load the package
library(ggcorrplot)
# Choose a smaller set of relevant numeric variables
selected_vars <- brfss_2017 %>%
select(`_AGE80`, ALCDAY5, AVEDRNK2, MAXDRNKS, `_BMI5`)  # Add/remove variables as needed
# Remove rows with all NAs in selected columns
selected_vars <- selected_vars[complete.cases(selected_vars), ]
# Create correlation matrix
cor_matrix_small <- cor(selected_vars, use = "complete.obs")
# Plot clean correlation heatmap
ggcorrplot(cor_matrix_small,
method = "circle",
type = "lower",
lab = TRUE,
lab_size = 4,
title = "Correlation Matrix of Key Numeric Variables",
show.legend = TRUE)
#library(ggplot2)
#library(dplyr)
#brfss_2017 <- brfss_2017 %>%
#  mutate(
#    HealthStatus = factor(GENHLTH,
#      levels = c(1, 2, 3, 4, 5),
#      labels = c("Excellent", "Very Good", "Good", "Fair", "Poor")
#    )
#  )
#ggplot(brfss_2017, aes(x = HealthStatus, fill = VapeStatus)) +
#  geom_bar(position = "dodge") +
#  labs(
#    title = "General Health Status by Vaping Status",
#    x = "Self-Reported General Health",
#    y = "Count",
#    fill = "Vaping Status"
#  ) +
#  theme_minimal() +
#  theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
library(dplyr)
# Filter out NA values before plotting
brfss_2017_clean <- brfss_2017 %>%
filter(!is.na(GENHLTH), !is.na(VapeStatus)) %>%
mutate(
HealthStatus = factor(GENHLTH,
levels = c(1, 2, 3, 4, 5),
labels = c("Excellent", "Very Good", "Good", "Fair", "Poor")
)
)
# Plot without NA rows
ggplot(brfss_2017_clean, aes(x = HealthStatus, fill = VapeStatus)) +
geom_bar(position = "dodge") +
labs(
title = "General Health Status by Vaping Status",
x = "Self-Reported General Health",
y = "Count",
fill = "Vaping Status"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
